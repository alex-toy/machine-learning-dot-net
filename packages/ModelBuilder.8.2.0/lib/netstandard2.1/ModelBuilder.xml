<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModelBuilder</name>
    </assembly>
    <members>
        <member name="T:ModelBuilder.BuildActions.BuildCapability">
            <summary>
                The <see cref="T:ModelBuilder.BuildActions.BuildCapability" />
                class is used to identify how <see cref="T:ModelBuilder.IExecuteStrategy" /> should operate when using
                <see cref="T:ModelBuilder.IBuildProcessor" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildActions.BuildCapability.#ctor(ModelBuilder.ValueGenerators.IValueGenerator)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildActions.BuildCapability" /> class.
            </summary>
            <param name="generator">The generator that provides the build functions.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.BuildCapability.#ctor(ModelBuilder.CreationRules.ICreationRule)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildActions.BuildCapability" /> class.
            </summary>
            <param name="rule">The rule that provides the build functions.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.BuildCapability.#ctor(ModelBuilder.TypeCreators.ITypeCreator,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildActions.BuildCapability" /> class.
            </summary>
            <param name="typeCreator">The type creator that provides the build functions.</param>
            <param name="supportsCreate">
                <c>true</c> if the <paramref name="typeCreator" /> can create an instance; otherwise
                <c>false</c>.
            </param>
            <param name="supportsPopulate">
                <c>true</c> if the <paramref name="typeCreator" /> can populate an instance; otherwise
                <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeCreator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.BuildCapability.CreateParameter(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.BuildCapability.CreateProperty(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.BuildCapability.CreateType(ModelBuilder.IExecuteStrategy,System.Type,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.BuildCapability.Populate(ModelBuilder.IExecuteStrategy,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="P:ModelBuilder.BuildActions.BuildCapability.AutoPopulate">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildActions.BuildCapability.ImplementedByType">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildActions.BuildCapability.SupportsCreate">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildActions.BuildCapability.SupportsPopulate">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.BuildActions.BuildRequirement">
            <summary>
                The <see cref="T:ModelBuilder.BuildActions.BuildRequirement" />
                enum identifies a required build capability.
            </summary>
        </member>
        <member name="F:ModelBuilder.BuildActions.BuildRequirement.Create">
            <summary>
                Identifies that a creation build process is required.
            </summary>
        </member>
        <member name="F:ModelBuilder.BuildActions.BuildRequirement.Populate">
            <summary>
                Identifies that a populate build process is required.
            </summary>
        </member>
        <member name="T:ModelBuilder.BuildActions.CircularReferenceBuildAction">
            <summary>
                The <see cref="T:ModelBuilder.BuildActions.CircularReferenceBuildAction" />
                class is used to return a value from the <see cref="T:ModelBuilder.IBuildChain" /> that has previously been created.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildActions.CircularReferenceBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Type,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.CircularReferenceBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.CircularReferenceBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.CircularReferenceBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.CircularReferenceBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.CircularReferenceBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.CircularReferenceBuildAction.Populate(ModelBuilder.IExecuteStrategy,System.Object)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Populate is not supported by this build action.</exception>
        </member>
        <member name="P:ModelBuilder.BuildActions.CircularReferenceBuildAction.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.BuildActions.CreationRuleBuildAction">
            <summary>
                The <see cref="T:ModelBuilder.BuildActions.CreationRuleBuildAction" />
                class is used to build a value from a matching <see cref="T:ModelBuilder.CreationRules.ICreationRule" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildActions.CreationRuleBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Type,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.CreationRuleBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.CreationRuleBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.CreationRuleBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.CreationRuleBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.CreationRuleBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.CreationRuleBuildAction.Populate(ModelBuilder.IExecuteStrategy,System.Object)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Populate is not supported by this build action.</exception>
        </member>
        <member name="P:ModelBuilder.BuildActions.CreationRuleBuildAction.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.BuildActions.IBuildAction">
            <summary>
                The <see cref="T:ModelBuilder.BuildActions.IBuildAction" />
                interface defines the members for evaluating whether the build action should be used and for building values.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildActions.IBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Type,System.Object[])">
            <summary>
                Builds a value using the specified type and execute strategy.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="type">The type of value to generate.</param>
            <param name="arguments">The constructor parameters to create the instance with.</param>
            <returns>The built object which may be <c>null</c>.</returns>
        </member>
        <member name="M:ModelBuilder.BuildActions.IBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo,System.Object[])">
            <summary>
                Builds a value using the specified parameter and execute strategy.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="parameterInfo">The parameter to generate a value for.</param>
            <param name="arguments">The constructor parameters to create the instance with.</param>
            <returns>The built object which may be <c>null</c>.</returns>
        </member>
        <member name="M:ModelBuilder.BuildActions.IBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo,System.Object[])">
            <summary>
                Builds a value using the specified property and execute strategy.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="propertyInfo">The property to generate a value for.</param>
            <param name="arguments">The constructor parameters to create the instance with.</param>
            <returns>The built object which may be <c>null</c>.</returns>
        </member>
        <member name="M:ModelBuilder.BuildActions.IBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type)">
            <summary>
                Gets the build capabilities of the build step for the specified type.
            </summary>
            <param name="buildConfiguration">The build configuration.</param>
            <param name="buildChain">The build chain.</param>
            <param name="type">The type to evaluate.</param>
            <returns>A <see cref="T:ModelBuilder.BuildActions.BuildCapability" /> indicating instance creation support via a <see cref="T:ModelBuilder.BuildActions.IBuildAction" />.</returns>
        </member>
        <member name="M:ModelBuilder.BuildActions.IBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.ParameterInfo)">
            <summary>
                Gets the build capabilities of the build step for the specified parameter.
            </summary>
            <param name="buildConfiguration">The build configuration.</param>
            <param name="buildChain">The build chain.</param>
            <param name="parameterInfo">The parameter to evaluate.</param>
            <returns>A <see cref="T:ModelBuilder.BuildActions.BuildCapability" /> indicating instance creation support via a <see cref="T:ModelBuilder.BuildActions.IBuildAction" />.</returns>
        </member>
        <member name="M:ModelBuilder.BuildActions.IBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.PropertyInfo)">
            <summary>
                Gets the build capabilities of the build step for the specified property.
            </summary>
            <param name="buildConfiguration">The build configuration.</param>
            <param name="buildChain">The build chain.</param>
            <param name="propertyInfo">The property to evaluate.</param>
            <returns>A <see cref="T:ModelBuilder.BuildActions.BuildCapability" /> indicating instance creation support via a <see cref="T:ModelBuilder.BuildActions.IBuildAction" />.</returns>
        </member>
        <member name="M:ModelBuilder.BuildActions.IBuildAction.Populate(ModelBuilder.IExecuteStrategy,System.Object)">
            <summary>
                Populates the specified instance using an execution strategy.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="instance">The instance to populate.</param>
            <returns>The populated instance.</returns>
        </member>
        <member name="P:ModelBuilder.BuildActions.IBuildAction.Priority">
            <summary>
                Gets the priority for this build step.
            </summary>
        </member>
        <member name="T:ModelBuilder.BuildActions.IBuildCapability">
            <summary>
                The <see cref="T:ModelBuilder.BuildActions.IBuildCapability" />
                interface defines the members for describing value creation support and creating instances.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildActions.IBuildCapability.CreateParameter(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo,System.Object[])">
            <summary>
                Creates an instance of the type with the specified arguments.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="parameterInfo">The parameter to evaluate.</param>
            <param name="args">The constructor parameters to create the instance with.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="M:ModelBuilder.BuildActions.IBuildCapability.CreateProperty(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo,System.Object[])">
            <summary>
                Creates an instance of the type with the specified arguments.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="propertyInfo">The property to evaluate.</param>
            <param name="args">The constructor parameters to create the instance with.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="M:ModelBuilder.BuildActions.IBuildCapability.CreateType(ModelBuilder.IExecuteStrategy,System.Type,System.Object[])">
            <summary>
                Creates an instance of the type with the specified arguments.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="targetType">The type of instance to create.</param>
            <param name="args">The constructor parameters to create the instance with.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="M:ModelBuilder.BuildActions.IBuildCapability.Populate(ModelBuilder.IExecuteStrategy,System.Object)">
            <summary>
                Populates the specified instance using an execution strategy.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="instance">The instance to populate.</param>
            <returns>The populated instance.</returns>
        </member>
        <member name="P:ModelBuilder.BuildActions.IBuildCapability.AutoPopulate">
            <summary>
                Gets whether properties on the created value should be automatically populated.
            </summary>
        </member>
        <member name="P:ModelBuilder.BuildActions.IBuildCapability.ImplementedByType">
            <summary>
                Gets the type that will be used to run a create or populate process.
            </summary>
        </member>
        <member name="P:ModelBuilder.BuildActions.IBuildCapability.SupportsCreate">
            <summary>
                Gets whether there the <see cref="T:ModelBuilder.BuildActions.IBuildAction" /> supports the requested scenario.
            </summary>
        </member>
        <member name="P:ModelBuilder.BuildActions.IBuildCapability.SupportsPopulate">
            <summary>
                Gets whether a build action supports populating the created value with its own logic.
            </summary>
        </member>
        <member name="T:ModelBuilder.BuildActions.TypeCreatorBuildAction">
            <summary>
                The <see cref="T:ModelBuilder.BuildActions.TypeCreatorBuildAction" />
                class is used to provide a build action that uses a matching <see cref="T:ModelBuilder.TypeCreators.ITypeCreator" /> to create and/or populate
                values.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildActions.TypeCreatorBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Type,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.TypeCreatorBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.TypeCreatorBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.TypeCreatorBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.TypeCreatorBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.TypeCreatorBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.TypeCreatorBuildAction.Populate(ModelBuilder.IExecuteStrategy,System.Object)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Populate is not supported by this build action.</exception>
        </member>
        <member name="P:ModelBuilder.BuildActions.TypeCreatorBuildAction.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.BuildActions.ValueGeneratorBuildAction">
            <summary>
                The <see cref="T:ModelBuilder.BuildActions.ValueGeneratorBuildAction" />
                class is used to build a value from a matching <see cref="T:ModelBuilder.ValueGenerators.IValueGenerator" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildActions.ValueGeneratorBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Type,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.ValueGeneratorBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.ValueGeneratorBuildAction.Build(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.ValueGeneratorBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.ValueGeneratorBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.ValueGeneratorBuildAction.GetBuildCapability(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildActions.ValueGeneratorBuildAction.Populate(ModelBuilder.IExecuteStrategy,System.Object)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Populate is not supported by this build action.</exception>
        </member>
        <member name="P:ModelBuilder.BuildActions.ValueGeneratorBuildAction.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.BuildConfiguration">
            <summary>
                The <see cref="T:ModelBuilder.BuildConfiguration" />
                class is used to contain all the configuration required to create values.
            </summary>
        </member>
        <member name="P:ModelBuilder.BuildConfiguration.ConstructorResolver">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildConfiguration.CreationRules">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildConfiguration.ExecuteOrderRules">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildConfiguration.IgnoreRules">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildConfiguration.ParameterResolver">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildConfiguration.PostBuildActions">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildConfiguration.PropertyResolver">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildConfiguration.TypeCreators">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildConfiguration.TypeMappingRules">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildConfiguration.TypeResolver">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildConfiguration.ValueGenerators">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.BuildConfigurationExtensions">
            <summary>
                The <see cref="T:ModelBuilder.BuildConfigurationExtensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IBuildConfiguration" /> interface.
            </summary>
            <summary>
                The <see cref="T:ModelBuilder.BuildConfigurationExtensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IBuildConfiguration" /> interface.
            </summary>
            <summary>
                The <see cref="T:ModelBuilder.BuildConfigurationExtensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IBuildConfiguration" /> interface.
            </summary>
            <summary>
                The <see cref="T:ModelBuilder.BuildConfigurationExtensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IBuildConfiguration" /> interface.
            </summary>
            <summary>
                The <see cref="T:ModelBuilder.BuildConfigurationExtensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IBuildConfiguration" /> interface.
            </summary>
            <summary>
                The <see cref="T:ModelBuilder.BuildConfigurationExtensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IBuildConfiguration" /> interface.
            </summary>
            <summary>
                The <see cref="T:ModelBuilder.BuildConfigurationExtensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IBuildConfiguration" /> interface.
            </summary>
            <summary>
                The <see cref="T:ModelBuilder.BuildConfigurationExtensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IBuildConfiguration" /> interface.
            </summary>
            <summary>
                The <see cref="T:ModelBuilder.BuildConfigurationExtensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IBuildConfiguration" /> interface.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Add(ModelBuilder.IBuildConfiguration,ModelBuilder.CreationRules.ICreationRule)">
            <summary>
                Adds a new creation rule to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="rule">The rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddCreationRule``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Adds a new creation rule to the configuration.
            </summary>
            <typeparam name="T">The type of rule to add.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddCreationRule``1(ModelBuilder.IBuildConfiguration,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Int32)">
            <summary>
                Adds a new creation rule to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="expression">The expression that identifies a property on <typeparamref name="T" /></param>
            <param name="value">The static value returned by the rule.</param>
            <param name="priority">The priority of the rule.</param>
            <typeparam name="T">The type that holds the property.</typeparam>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter does not represent a property.</exception>
            <exception cref="T:System.ArgumentException">
                The <paramref name="expression" /> parameter does not match a property on the type
                to generate.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddCreationRule(ModelBuilder.IBuildConfiguration,System.Predicate{System.Type},System.Object,System.Int32)">
            <summary>
                Adds a new <see cref="T:ModelBuilder.CreationRules.PropertyPredicateCreationRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="predicate">The predicate that matches on a target type.</param>
            <param name="value">The static value returned by the rule.</param>
            <param name="priority">The priority of the rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddCreationRule(ModelBuilder.IBuildConfiguration,System.Predicate{System.Type},System.Func{System.Object},System.Int32)">
            <summary>
                Adds a new <see cref="T:ModelBuilder.CreationRules.PropertyPredicateCreationRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="predicate">The predicate that matches on a target type.</param>
            <param name="valueGenerator">The value generator used by the rule to return a value.</param>
            <param name="priority">The priority of the rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddCreationRule(ModelBuilder.IBuildConfiguration,System.Predicate{System.Reflection.PropertyInfo},System.Object,System.Int32)">
            <summary>
                Adds a new <see cref="T:ModelBuilder.CreationRules.PropertyPredicateCreationRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="predicate">The predicate that matches on a property.</param>
            <param name="value">The static value returned by the rule.</param>
            <param name="priority">The priority of the rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddCreationRule(ModelBuilder.IBuildConfiguration,System.Predicate{System.Reflection.PropertyInfo},System.Func{System.Object},System.Int32)">
            <summary>
                Adds a new <see cref="T:ModelBuilder.CreationRules.PropertyPredicateCreationRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="predicate">The predicate that matches on a property.</param>
            <param name="valueGenerator">The value generator used by the rule to return a value.</param>
            <param name="priority">The priority of the rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddCreationRule(ModelBuilder.IBuildConfiguration,System.Predicate{System.Reflection.ParameterInfo},System.Object,System.Int32)">
            <summary>
                Adds a new <see cref="T:ModelBuilder.CreationRules.PropertyPredicateCreationRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="predicate">The predicate that matches on a parameter.</param>
            <param name="value">The static value returned by the rule.</param>
            <param name="priority">The priority of the rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddCreationRule(ModelBuilder.IBuildConfiguration,System.Predicate{System.Reflection.ParameterInfo},System.Func{System.Object},System.Int32)">
            <summary>
                Adds a new <see cref="T:ModelBuilder.CreationRules.PropertyPredicateCreationRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="predicate">The predicate that matches on a parameter.</param>
            <param name="valueGenerator">The value generator used by the rule to return a value.</param>
            <param name="priority">The priority of the rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddCreationRule(ModelBuilder.IBuildConfiguration,System.Type,System.Text.RegularExpressions.Regex,System.Object,System.Int32)">
            <summary>
                Adds a new <see cref="T:ModelBuilder.CreationRules.RegexCreationRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="expression">The expression that matches a property name.</param>
            <param name="value">The static value returned by the rule.</param>
            <param name="priority">The priority of the rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddCreationRule(ModelBuilder.IBuildConfiguration,System.Type,System.String,System.Object,System.Int32)">
            <summary>
                Adds a new <see cref="T:ModelBuilder.CreationRules.RegexCreationRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="expression">The expression that matches a property name.</param>
            <param name="value">The static value returned by the rule.</param>
            <param name="priority">The priority of the rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c> or empty.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.RemoveCreationRule``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Removes creation rules from the configuration that match the specified type.
            </summary>
            <typeparam name="T">The type of rule to remove.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.UpdateCreationRule``1(ModelBuilder.IBuildConfiguration,System.Action{``0})">
            <summary>
                Updates a creation rule.
            </summary>
            <typeparam name="T">The type of creation rule being updated.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="action">The action to run against the rule.</param>
            <returns>The build configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">
                The <typeparamref name="T" /> creation rule was not found in the build
                configuration.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Add(ModelBuilder.IBuildConfiguration,ModelBuilder.IConfigurationModule)">
            <summary>
                Adds configuration provided by the specified configuration module.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="module">The module.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="module" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Create``1(ModelBuilder.IBuildConfiguration,System.Object[])">
            <summary>
                Creates an instance of <typeparamref name="T" /> using the specified build configuration and any provided
                constructor arguments.
            </summary>
            <typeparam name="T">The type of instance to create.</typeparam>
            <param name="buildConfiguration">The build configuration to create the instance with.</param>
            <param name="args">The constructor arguments to create the type with.</param>
            <returns>The new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
            <remarks>This method uses <see cref="T:ModelBuilder.DefaultExecuteStrategy`1" /> to create the instance.</remarks>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Create(ModelBuilder.IBuildConfiguration,System.Type,System.Object[])">
            <summary>
                Creates an instance of a type using the specified build configuration and any provided constructor arguments.
            </summary>
            <param name="buildConfiguration">The build configuration to create the instance with.</param>
            <param name="instanceType">The type of instance to create.</param>
            <param name="args">The constructor arguments to create the type with.</param>
            <returns>The new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceType" /> parameter is <c>null</c>.</exception>
            <remarks>This method uses <see cref="T:ModelBuilder.DefaultExecuteStrategy" /> to create the instance.</remarks>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Populate``1(ModelBuilder.IBuildConfiguration,``0)">
            <summary>
                Populates the specified instance using the provided build configuration.
            </summary>
            <typeparam name="T">The type of instance to populate.</typeparam>
            <param name="buildConfiguration">The build configuration to use.</param>
            <param name="instance">The instance to populate.</param>
            <returns>The updated instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.UsingExecuteStrategy``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Returns a new <see cref="T:ModelBuilder.IExecuteStrategy`1" /> for the specified build configuration.
            </summary>
            <typeparam name="T">The type of <see cref="T:ModelBuilder.IExecuteStrategy`1" /> to return.</typeparam>
            <param name="buildConfiguration">The build configuration.</param>
            <returns>A new execute strategy.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.UsingModule``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Adds configuration using the specified module type.
            </summary>
            <typeparam name="T">The type of configuration module to add.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Add(ModelBuilder.IBuildConfiguration,ModelBuilder.ExecuteOrderRules.IExecuteOrderRule)">
            <summary>
                Adds a new execute order rule to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="rule">The rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddExecuteOrderRule``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Adds a new execute order rule to the configuration.
            </summary>
            <typeparam name="T">The type of rule to add.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddExecuteOrderRule``1(ModelBuilder.IBuildConfiguration,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32)">
            <summary>
                Adds a new execute order rule to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <typeparam name="T">The type that holds the property.</typeparam>
            <param name="expression">The expression that identifies a property on <typeparamref name="T" /></param>
            <param name="priority">The priority of the rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter does not represent a property.</exception>
            <exception cref="T:System.ArgumentException">
                The <paramref name="expression" /> parameter does not match a property on the type
                to generate.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddExecuteOrderRule(ModelBuilder.IBuildConfiguration,System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
                Adds a new <see cref="T:ModelBuilder.ExecuteOrderRules.RegexExecuteOrderRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="expression">The expression that matches a property name.</param>
            <param name="priority">The priority of the rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddExecuteOrderRule(ModelBuilder.IBuildConfiguration,System.Predicate{System.Reflection.PropertyInfo},System.Int32)">
            <summary>
                Adds a new <see cref="T:ModelBuilder.ExecuteOrderRules.PropertyPredicateExecuteOrderRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="predicate">The predicate that matches on a property.</param>
            <param name="priority">The priority of the rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.RemoveExecuteOrderRule``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Removes execute order rules from the configuration that match the specified type.
            </summary>
            <typeparam name="T">The type of rule to remove.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.UpdateExecuteOrderRule``1(ModelBuilder.IBuildConfiguration,System.Action{``0})">
            <summary>
                Updates an execute order rule.
            </summary>
            <typeparam name="T">The type of execute order rule being updated.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="action">The action to run against the rule.</param>
            <returns>The build configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">
                The <typeparamref name="T" /> execute order rule was not found in the build
                configuration.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Add(ModelBuilder.IBuildConfiguration,ModelBuilder.IgnoreRules.IIgnoreRule)">
            <summary>
                Adds a new ignore rule to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="rule">The rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddIgnoreRule``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Adds a new ignore rule to the configuration.
            </summary>
            <typeparam name="T">The type of rule to add.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddIgnoreRule``1(ModelBuilder.IBuildConfiguration,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Adds a new ignore rule to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <typeparam name="T">The type that holds the property.</typeparam>
            <param name="expression">The expression that identifies a property on <typeparamref name="T" /></param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter does not represent a property.</exception>
            <exception cref="T:System.ArgumentException">
                The <paramref name="expression" /> parameter does not match a property on the type
                to generate.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddIgnoreRule(ModelBuilder.IBuildConfiguration,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
                Adds a new <see cref="T:ModelBuilder.IgnoreRules.PredicateIgnoreRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="predicate">The predicate that matches on a property.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddIgnoreRule(ModelBuilder.IBuildConfiguration,System.Text.RegularExpressions.Regex)">
            <summary>
                Adds a new <see cref="T:ModelBuilder.IgnoreRules.RegexIgnoreRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="expression">The expression that matches a property name.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddIgnoreRule(ModelBuilder.IBuildConfiguration,System.String)">
            <summary>
                Adds a new <see cref="T:ModelBuilder.IgnoreRules.RegexIgnoreRule" /> to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="expression">The expression that matches a property name.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c> or empty.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Ignoring``1(ModelBuilder.IBuildConfiguration,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Appends a new <see cref="T:ModelBuilder.IgnoreRules.IIgnoreRule" /> to the build configuration using the specified expression.
            </summary>
            <typeparam name="T">The type of instance that matches the rule.</typeparam>
            <param name="buildConfiguration">The build configuration to update.</param>
            <param name="expression">The expression that identifies a property on <typeparamref name="T" /></param>
            <returns>The build configuration with the new rule.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter does not represent a property.</exception>
            <exception cref="T:System.ArgumentException">
                The <paramref name="expression" /> parameter does not match a property on the type
                to generate.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.RemoveIgnoreRule``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Removes ignore rules from the configuration that match the specified type.
            </summary>
            <typeparam name="T">The type of rule to remove.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.UpdateIgnoreRule``1(ModelBuilder.IBuildConfiguration,System.Action{``0})">
            <summary>
                Updates an ignore rule.
            </summary>
            <typeparam name="T">The type of ignore rule being updated.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="action">The action to run against the rule.</param>
            <returns>The build configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">
                The <typeparamref name="T" /> ignore rule was not found in the build
                configuration.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Add(ModelBuilder.IBuildConfiguration,ModelBuilder.IPostBuildAction)">
            <summary>
                Adds a new post-build action to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="postBuildAction">The post-build action.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="postBuildAction" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddPostBuildAction``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Adds a new post-build action to the configuration.
            </summary>
            <typeparam name="T">The type of post-build action to add.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.RemovePostBuildAction``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Removes post-build actions from the configuration that match the specified type.
            </summary>
            <typeparam name="T">The type of post-build action to remove.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.UpdatePostBuildAction``1(ModelBuilder.IBuildConfiguration,System.Action{``0})">
            <summary>
                Updates a post-build action.
            </summary>
            <typeparam name="T">The type of post-build action being updated.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="action">The action to run against the post-build action.</param>
            <returns>The build configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">
                The <typeparamref name="T" /> post-build action was not found in the build
                configuration.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Add(ModelBuilder.IBuildConfiguration,ModelBuilder.TypeCreators.ITypeCreator)">
            <summary>
                Adds a new type creator to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="typeCreator">The type creator.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeCreator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddTypeCreator``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Adds a new type creator to the configuration.
            </summary>
            <typeparam name="T">The type of type creator to add.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.RemoveTypeCreator``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Removes type creators from the configuration that match the specified type.
            </summary>
            <typeparam name="T">The type of type creator to remove.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.UpdateTypeCreator``1(ModelBuilder.IBuildConfiguration,System.Action{``0})">
            <summary>
                Updates a type creator.
            </summary>
            <typeparam name="T">The type of type creator being updated.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="action">The action to run against the type creator.</param>
            <returns>The build configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">
                The <typeparamref name="T" /> type creator was not found in the build
                configuration.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Add(ModelBuilder.IBuildConfiguration,ModelBuilder.TypeMappingRule)">
            <summary>
                Adds a new type mapping rule to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="rule">The rule.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddTypeMappingRule``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Adds a new type mapping rule to the configuration.
            </summary>
            <typeparam name="T">The type of rule to add.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddTypeMappingRule``2(ModelBuilder.IBuildConfiguration)">
            <summary>
                Adds a new type mapping rule to the configuration.
            </summary>
            <typeparam name="TSource">The source type to match.</typeparam>
            <typeparam name="TTarget">The target type to create.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Mapping``2(ModelBuilder.IBuildConfiguration)">
            <summary>
                Appends a new <see cref="T:ModelBuilder.TypeMappingRule" /> to the build configuration using the specified types.
            </summary>
            <typeparam name="TSource">The source type to use for type mapping.</typeparam>
            <typeparam name="TTarget">The target type to use for type mapping.</typeparam>
            <param name="buildConfiguration">The build configuration to update.</param>
            <returns>The build configuration with the new rule.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildConfiguration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.RemoveTypeMappingRule``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Removes type mapping rules from the configuration that match the specified type.
            </summary>
            <typeparam name="T">The type of rule to remove.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.Add(ModelBuilder.IBuildConfiguration,ModelBuilder.ValueGenerators.IValueGenerator)">
            <summary>
                Adds a new value generator to the configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="valueGenerator">The value generator.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="valueGenerator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.AddValueGenerator``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Adds a new value generator to the configuration.
            </summary>
            <typeparam name="T">The type of value generator to add.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.RemoveValueGenerator``1(ModelBuilder.IBuildConfiguration)">
            <summary>
                Removes value generators from the configuration that match the specified type.
            </summary>
            <typeparam name="T">The type of value generator to remove.</typeparam>
            <param name="configuration">The configuration.</param>
            <returns>The configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.UpdateValueGenerator``1(ModelBuilder.IBuildConfiguration,System.Action{``0})">
            <summary>
                Updates a value generator.
            </summary>
            <typeparam name="T">The type of value generator being updated.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="action">The action to run against the value generator.</param>
            <returns>The build configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">
                The <typeparamref name="T" /> value generator was not found in the build
                configuration.
            </exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.WriteLog``1(ModelBuilder.IBuildConfiguration,System.Action{System.String})">
            <summary>
                Writes the log entry using the specified action after the execute strategy is invoked.
            </summary>
            <typeparam name="T">The type of instance to create and populate.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="action">The logging action to call.</param>
            <returns>The execute strategy to invoke.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildConfigurationExtensions.WriteLog(ModelBuilder.IBuildConfiguration,System.Action{System.String})">
            <summary>
                Writes the log entry using the specified action after the execute strategy is invoked.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="action">The logging action to call.</param>
            <returns>The execute strategy to invoke.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:ModelBuilder.BuildException">
            <summary>
                The <see cref="T:ModelBuilder.BuildException" />
                class is used to describe a failure to build an instance of a type.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildException" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ModelBuilder.BuildException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:ModelBuilder.BuildException.#ctor(System.String,System.Type,System.String,System.Object,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="targetType">The type of instance to create.</param>
            <param name="referenceName">Identifies the possible parameter or property name the instance is intended for.</param>
            <param name="context">The possible context object the instance is being created for.</param>
            <param name="buildLog">The build log.</param>
        </member>
        <member name="M:ModelBuilder.BuildException.#ctor(System.String,System.Type,System.String,System.Object,System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="targetType">The type of instance to create.</param>
            <param name="referenceName">Identifies the possible parameter or property name the instance is intended for.</param>
            <param name="context">The possible context object the instance is being created for.</param>
            <param name="buildLog">The build log.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="P:ModelBuilder.BuildException.BuildLog">
            <summary>
                Gets or sets the build log.
            </summary>
        </member>
        <member name="P:ModelBuilder.BuildException.Context">
            <summary>
                Gets or sets the context of the build action.
            </summary>
        </member>
        <member name="P:ModelBuilder.BuildException.ReferenceName">
            <summary>
                Gets or sets the reference name of the build action.
            </summary>
        </member>
        <member name="P:ModelBuilder.BuildException.TargetType">
            <summary>
                Gets or sets the target type of the build action.
            </summary>
        </member>
        <member name="T:ModelBuilder.BuildHistory">
            <summary>
                The <see cref="T:ModelBuilder.BuildHistory" />
                class is used to track a hierarchy of objects being created.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildHistory.AddCapability(System.Type,ModelBuilder.BuildActions.IBuildCapability)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.BuildHistory.GetCapability(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.BuildHistory.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.BuildHistory.Pop">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.BuildHistory.Push(System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildHistory.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildHistory.Count">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildHistory.First">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.BuildHistory.Last">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.BuildHistoryItem">
            <summary>
                The <see cref="T:ModelBuilder.BuildHistoryItem" />
                class is used to track items built and related build capabilities.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildHistoryItem.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildHistoryItem" /> class.
            </summary>
            <param name="value">The value created.</param>
        </member>
        <member name="P:ModelBuilder.BuildHistoryItem.Capabilities">
            <summary>
                The cache of build capabilities by requested types.
            </summary>
        </member>
        <member name="P:ModelBuilder.BuildHistoryItem.Value">
            <summary>
                Gets the value created.
            </summary>
        </member>
        <member name="T:ModelBuilder.BuildProcessor">
            <summary>
                The <see cref="T:ModelBuilder.IBuildProcessor" />
                class is used to build types using a set of <see cref="T:ModelBuilder.BuildActions.IBuildAction" /> instances.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildProcessor.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildProcessor" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.BuildProcessor.#ctor(System.Collections.Generic.IEnumerable{ModelBuilder.BuildActions.IBuildAction})">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.BuildProcessor" /> class.
            </summary>
            <param name="actions">The actions to use for the build processor.</param>
        </member>
        <member name="M:ModelBuilder.BuildProcessor.GetBuildCapability(ModelBuilder.IExecuteStrategy,ModelBuilder.BuildActions.BuildRequirement,System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildProcessor.GetBuildCapability(ModelBuilder.IExecuteStrategy,ModelBuilder.BuildActions.BuildRequirement,System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.BuildProcessor.GetBuildCapability(ModelBuilder.IExecuteStrategy,ModelBuilder.BuildActions.BuildRequirement,System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:ModelBuilder.CacheLevel">
            <summary>
                The <see cref="T:ModelBuilder.CacheLevel" />
                enum defines the level of caching to use.
            </summary>
        </member>
        <member name="F:ModelBuilder.CacheLevel.None">
            <summary>
                Identifies that no items are stored in a cache.
            </summary>
        </member>
        <member name="F:ModelBuilder.CacheLevel.PerInstance">
            <summary>
                Identifies that items are stored in a per instance cache.
            </summary>
            <remarks>This typically means that a cache is valid per Create/Populate call.</remarks>
        </member>
        <member name="F:ModelBuilder.CacheLevel.Global">
            <summary>
                Identifies that items are stored in a cache that lives across Create/Populate calls.
            </summary>
        </member>
        <member name="T:ModelBuilder.CommonExtensions">
            <summary>
                The <see cref="T:ModelBuilder.CommonExtensions" />
                class provides common extension methods.
            </summary>
        </member>
        <member name="M:ModelBuilder.CommonExtensions.IsNullable(System.Type)">
            <summary>
                Gets whether the specified type is a nullable type.
            </summary>
            <param name="type">The type to validate.</param>
            <returns><c>true</c> if the type is nullable; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CommonExtensions.Next``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
                Returns a random item from the data set.
            </summary>
            <param name="source">The source data set.</param>
            <returns>A new data item.</returns>
        </member>
        <member name="M:ModelBuilder.CommonExtensions.Set``1(``0,System.Action{``0})">
            <summary>
                Makes a change to the instance using the specified action.
            </summary>
            <typeparam name="T">The type of instance being changed.</typeparam>
            <param name="instance">The instance to update.</param>
            <param name="action">The action to run against the instance.</param>
            <returns>The updated instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CommonExtensions.Set``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Supports setting properties with inaccessible setters such as private or protected
            Also limited support for setting of readonly auto-properties
            </summary>
            <typeparam name="T">The type of instance being changed.</typeparam>
            <typeparam name="TVALUE">The value to set the expresison function to.</typeparam>
            <param name="instance">The instance to update.</param>
            <param name="expressionFunc">The expresion function to set against the instance.</param>
            <param name="value"></param>
            <returns>The updated instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expressionFunc" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.NotSupportedException">The <paramref name="expressionFunc" /> parameter is not supported - readonly and complex properties are not supported.</exception>
        </member>
        <member name="T:ModelBuilder.CreationRules.ExpressionCreationRule`1">
            <summary>
                The <see cref="T:ModelBuilder.CreationRules.ExpressionCreationRule`1" />
                class is used to match a property using an expression in order to return a value.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
        </member>
        <member name="M:ModelBuilder.CreationRules.ExpressionCreationRule`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRules.ExpressionCreationRule`1" /> class.
            </summary>
            <param name="expression">The expression used to identify a property on a type.</param>
            <param name="value">The value that the rule returns.</param>
            <param name="priority">The priority to apply to the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.ExpressionCreationRule`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{System.Object},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRules.ExpressionCreationRule`1" /> class.
            </summary>
            <param name="expression">The expression used to identify a property on a type.</param>
            <param name="valueGenerator">The value generator used to build the value returned by the rule.</param>
            <param name="priority">The priority to apply to the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="valueGenerator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.ExpressionCreationRule`1.Create(ModelBuilder.IExecuteStrategy,System.Type)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">The class does not support creating values for types.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.ExpressionCreationRule`1.Create(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.ExpressionCreationRule`1.Create(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">The class does not support creating values for parameters.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.ExpressionCreationRule`1.IsMatch(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.ExpressionCreationRule`1.IsMatch(System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.ExpressionCreationRule`1.IsMatch(System.Reflection.ParameterInfo)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.ExpressionCreationRule`1.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.CreationRules.ExpressionCreationRule`1.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.CreationRules.ICreationRule">
            <summary>
                The <see cref="T:ModelBuilder.CreationRules.ICreationRule" />
                interface defines the members for generating values for simple scenarios.
            </summary>
        </member>
        <member name="M:ModelBuilder.CreationRules.ICreationRule.Create(ModelBuilder.IExecuteStrategy,System.Type)">
            <summary>
                Creates a new value of the specified type.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="type">The type of value to create.</param>
            <returns>A new value of the type.</returns>
        </member>
        <member name="M:ModelBuilder.CreationRules.ICreationRule.Create(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo)">
            <summary>
                Creates a new value of the specified type.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="propertyInfo">The property to create the value for.</param>
            <returns>A new value of the type.</returns>
        </member>
        <member name="M:ModelBuilder.CreationRules.ICreationRule.Create(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo)">
            <summary>
                Creates a new value of the specified type.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="parameterInfo">The parameter to create the value for.</param>
            <returns>A new value of the type.</returns>
        </member>
        <member name="M:ModelBuilder.CreationRules.ICreationRule.IsMatch(System.Type)">
            <summary>
                Returns whether the specified type matches this rule.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns><c>true</c> if the type matches this rule; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.CreationRules.ICreationRule.IsMatch(System.Reflection.PropertyInfo)">
            <summary>
                Returns whether the specified property matches this rule.
            </summary>
            <param name="propertyInfo">The property to generate the value for.</param>
            <returns><c>true</c> if the property matches this rule; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.CreationRules.ICreationRule.IsMatch(System.Reflection.ParameterInfo)">
            <summary>
                Returns whether the specified parameter matches this rule.
            </summary>
            <param name="parameterInfo">The parameter to generate the value for.</param>
            <returns><c>true</c> if the parameter matches this rule; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ModelBuilder.CreationRules.ICreationRule.Priority">
            <summary>
                Gets the priority for this rule.
            </summary>
        </member>
        <member name="T:ModelBuilder.CreationRules.ParameterPredicateCreationRule">
            <summary>
                The <see cref="T:ModelBuilder.CreationRules.ParameterPredicateCreationRule" />
                class is used to provide a creation rule based on predicate matches on types, parameter or properties.
            </summary>
        </member>
        <member name="M:ModelBuilder.CreationRules.ParameterPredicateCreationRule.#ctor(System.Predicate{System.Reflection.ParameterInfo},System.Object,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRules.ParameterPredicateCreationRule" /> class.
            </summary>
            <param name="predicate">The predicate to evaluate.</param>
            <param name="value">The value that the rule returns.</param>
            <param name="priority">The priority to apply to the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.ParameterPredicateCreationRule.#ctor(System.Predicate{System.Reflection.ParameterInfo},System.Func{System.Object},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRules.ParameterPredicateCreationRule" /> class.
            </summary>
            <param name="predicate">The predicate to evaluate.</param>
            <param name="valueGenerator">The value generator used to build the value returned by the rule.</param>
            <param name="priority">The priority to apply to the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="valueGenerator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.ParameterPredicateCreationRule.Create(ModelBuilder.IExecuteStrategy,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.ParameterPredicateCreationRule.Create(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.ParameterPredicateCreationRule.Create(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.ParameterPredicateCreationRule.IsMatch(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.ParameterPredicateCreationRule.IsMatch(System.Reflection.PropertyInfo)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.ParameterPredicateCreationRule.IsMatch(System.Reflection.ParameterInfo)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.CreationRules.ParameterPredicateCreationRule.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.CreationRules.PropertyPredicateCreationRule">
            <summary>
                The <see cref="T:ModelBuilder.CreationRules.PropertyPredicateCreationRule" />
                class is used to provide a creation rule based on predicate matches on types, parameter or properties.
            </summary>
        </member>
        <member name="M:ModelBuilder.CreationRules.PropertyPredicateCreationRule.#ctor(System.Predicate{System.Reflection.PropertyInfo},System.Object,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRules.PropertyPredicateCreationRule" /> class.
            </summary>
            <param name="predicate">The predicate to evaluate.</param>
            <param name="value">The value that the rule returns.</param>
            <param name="priority">The priority to apply to the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.PropertyPredicateCreationRule.#ctor(System.Predicate{System.Reflection.PropertyInfo},System.Func{System.Object},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRules.PropertyPredicateCreationRule" /> class.
            </summary>
            <param name="predicate">The predicate to evaluate.</param>
            <param name="valueGenerator">The value generator used to build the value returned by the rule.</param>
            <param name="priority">The priority to apply to the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="valueGenerator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.PropertyPredicateCreationRule.Create(ModelBuilder.IExecuteStrategy,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.PropertyPredicateCreationRule.Create(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.PropertyPredicateCreationRule.Create(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.PropertyPredicateCreationRule.IsMatch(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.PropertyPredicateCreationRule.IsMatch(System.Reflection.PropertyInfo)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.PropertyPredicateCreationRule.IsMatch(System.Reflection.ParameterInfo)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.CreationRules.PropertyPredicateCreationRule.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.CreationRules.RegexCreationRule">
            <summary>
                The <see cref="T:ModelBuilder.CreationRules.RegexCreationRule" />
                class is used to provide a creation rule based on regular expression matches on property and parameter names.
            </summary>
        </member>
        <member name="M:ModelBuilder.CreationRules.RegexCreationRule.#ctor(System.Type,System.Text.RegularExpressions.Regex,System.Object,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRules.RegexCreationRule" /> class.
            </summary>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="expression">The expression used to identify a property on a type.</param>
            <param name="value">The value that the rule returns.</param>
            <param name="priority">The priority to apply to the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.RegexCreationRule.#ctor(System.Type,System.Text.RegularExpressions.Regex,System.Func{System.Object},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRules.RegexCreationRule" /> class.
            </summary>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="expression">The expression used to identify a property on a type.</param>
            <param name="valueGenerator">The value generator used to build the value returned by the rule.</param>
            <param name="priority">The priority to apply to the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="valueGenerator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.RegexCreationRule.#ctor(System.Type,System.String,System.Object,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRules.RegexCreationRule" /> class.
            </summary>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="expression">The expression used to identify a property on a type.</param>
            <param name="value">The value that the rule returns.</param>
            <param name="priority">The priority to apply to the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.RegexCreationRule.#ctor(System.Type,System.String,System.Func{System.Object},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRules.RegexCreationRule" /> class.
            </summary>
            <param name="targetType">The target type that matches the rule.</param>
            <param name="expression">The expression used to identify a property on a type.</param>
            <param name="valueGenerator">The value generator used to build the value returned by the rule.</param>
            <param name="priority">The priority to apply to the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="valueGenerator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.RegexCreationRule.Create(ModelBuilder.IExecuteStrategy,System.Type)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">The class does not support creating values for types.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.RegexCreationRule.Create(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.RegexCreationRule.Create(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.RegexCreationRule.IsMatch(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.RegexCreationRule.IsMatch(System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.RegexCreationRule.IsMatch(System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="P:ModelBuilder.CreationRules.RegexCreationRule.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.CreationRules.TypePredicateCreationRule">
            <summary>
                The <see cref="T:ModelBuilder.CreationRules.TypePredicateCreationRule" />
                class is used to provide a creation rule based on predicate matches on types, parameter or properties.
            </summary>
        </member>
        <member name="M:ModelBuilder.CreationRules.TypePredicateCreationRule.#ctor(System.Predicate{System.Type},System.Object,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRules.TypePredicateCreationRule" /> class.
            </summary>
            <param name="predicate">The predicate to evaluate.</param>
            <param name="value">The value that the rule returns.</param>
            <param name="priority">The priority to apply to the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.TypePredicateCreationRule.#ctor(System.Predicate{System.Type},System.Func{System.Object},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.CreationRules.TypePredicateCreationRule" /> class.
            </summary>
            <param name="predicate">The predicate to evaluate.</param>
            <param name="valueGenerator">The value generator used to build the value returned by the rule.</param>
            <param name="priority">The priority to apply to the rule.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="valueGenerator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.CreationRules.TypePredicateCreationRule.Create(ModelBuilder.IExecuteStrategy,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.TypePredicateCreationRule.Create(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.TypePredicateCreationRule.Create(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.TypePredicateCreationRule.IsMatch(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.TypePredicateCreationRule.IsMatch(System.Reflection.PropertyInfo)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.CreationRules.TypePredicateCreationRule.IsMatch(System.Reflection.ParameterInfo)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.CreationRules.TypePredicateCreationRule.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.Data.Location">
            <summary>
                The <see cref="T:ModelBuilder.Data.Location" />
                class defines location information.
            </summary>
        </member>
        <member name="M:ModelBuilder.Data.Location.Parse(System.String)">
            <summary>
                Parses a new location from the specified CSV data.
            </summary>
            <param name="csvData">The CSV data.</param>
            <returns>The location.</returns>
        </member>
        <member name="P:ModelBuilder.Data.Location.City">
            <summary>
                Gets or sets the city.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Location.Country">
            <summary>
                Gets or sets the country.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Location.Phone">
            <summary>
                Gets or sets the phone.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Location.PostCode">
            <summary>
                Gets or sets the post code.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Location.State">
            <summary>
                Gets or sets the state.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Location.StreetName">
            <summary>
                Gets or sets the street name.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.Location.StreetSuffix">
            <summary>
                Gets or sets the street suffix.
            </summary>
        </member>
        <member name="T:ModelBuilder.Data.TestData">
            <summary>
                The <see cref="T:ModelBuilder.Data.TestData" />
                class is used to expose some pre-generated test data.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.TestData.Companies">
            <summary>
                Gets a test data set of companies.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.TestData.Domains">
            <summary>
                Gets a test data set of domains.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.TestData.FemaleNames">
            <summary>
                Gets a test data set of female names.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.TestData.LastNames">
            <summary>
                Gets a test data set of last names.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.TestData.Locations">
            <summary>
                Gets a test data set of locations.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.TestData.MaleNames">
            <summary>
                Gets a test data set of male names.
            </summary>
        </member>
        <member name="P:ModelBuilder.Data.TestData.TimeZones">
            <summary>
                Gets a test data set of time zones.
            </summary>
        </member>
        <member name="T:ModelBuilder.DefaultBuildLog">
            <summary>
                The <see cref="T:ModelBuilder.DefaultBuildLog" />
                class provides default implementation for creating a build log when creating types and values.
            </summary>
            <threadsafety instance="false" />
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.BuildFailure(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CircularReferenceDetected(System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.Clear">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatedParameter(System.Reflection.ParameterInfo,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatedProperty(System.Reflection.PropertyInfo,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatedType(System.Type,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatingParameter(System.Reflection.ParameterInfo,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatingProperty(System.Reflection.PropertyInfo,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatingType(System.Type,System.Type,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="creatorType" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.CreatingValue(System.Type,System.Type,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generatorType" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.IgnoringProperty(System.Reflection.PropertyInfo,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.MappedType(System.Type,System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.PopulatedInstance(System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.PopulatingInstance(System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.PostBuildAction(System.Type,System.Type,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="postBuildType" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultBuildLog.WriteMessage(System.String)">
            <summary>
                Writes the specified message to the log.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="P:ModelBuilder.DefaultBuildLog.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.DefaultBuildLog.Output">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.DefaultConfigurationModule">
            <summary>
                The <see cref="T:ModelBuilder.DefaultConfigurationModule" />
                class is used to provide the default configuration for building values.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultConfigurationModule.Configure(ModelBuilder.IBuildConfiguration)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> is <c>null</c>.</exception>
        </member>
        <member name="T:ModelBuilder.DefaultConstructorResolver">
            <summary>
                The <see cref="T:ModelBuilder.DefaultConstructorResolver" />
                class is used to resolve a constructor for a type.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultConstructorResolver.#ctor(ModelBuilder.CacheLevel)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.DefaultConstructorResolver" /> class.
            </summary>
            <param name="cacheLevel">The cache level to use for resolved constructors and parameters.</param>
        </member>
        <member name="M:ModelBuilder.DefaultConstructorResolver.Resolve(System.Type,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.MissingMemberException">
                The <paramref name="type" /> parameter does not have a public constructor and
                no arguments are supplied.
            </exception>
            <exception cref="T:System.MissingMemberException">
                The <paramref name="type" /> parameter does not have a constructor that
                matches the supplied arguments.
            </exception>
        </member>
        <member name="P:ModelBuilder.DefaultConstructorResolver.CacheLevel">
            <summary>
                Gets or sets whether constructors identified by <see cref="M:ModelBuilder.DefaultConstructorResolver.Resolve(System.Type,System.Object[])" /> are cached.
            </summary>
            <returns>Returns the cache level to apply to parameters.</returns>
        </member>
        <member name="T:ModelBuilder.DefaultExecuteStrategy">
            <summary>
                The <see cref="T:ModelBuilder.DefaultExecuteStrategy`1" />
                class is used to create types and populate instances.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.DefaultExecuteStrategy" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.#ctor(ModelBuilder.IBuildHistory,ModelBuilder.IBuildLog,ModelBuilder.IBuildProcessor)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.DefaultExecuteStrategy" /> class.
            </summary>
            <param name="buildHistory">The build history tracker.</param>
            <param name="buildLog">The build log.</param>
            <param name="buildProcessor">The build processor.</param>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.Create(System.Type,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.NotSupportedException">
                No <see cref="T:ModelBuilder.ValueGenerators.IValueGenerator" /> or <see cref="T:ModelBuilder.TypeCreators.ITypeCreator" /> was found to
                generate a requested type.
            </exception>
            <exception cref="T:ModelBuilder.BuildException">Failed to generate a requested type.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.CreateParameters(System.Reflection.MethodBase)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.Initialize(ModelBuilder.IBuildConfiguration)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.Populate(System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.NotSupportedException">
                No <see cref="T:ModelBuilder.ValueGenerators.IValueGenerator" /> or <see cref="T:ModelBuilder.TypeCreators.ITypeCreator" /> was found to
                generate a requested type.
            </exception>
            <exception cref="T:ModelBuilder.BuildException">Failed to generate a requested type.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.Build(System.Type,System.Object[])">
            <summary>
                Builds a value for the specified type.
            </summary>
            <param name="type">The type of value to build.</param>
            <param name="args">The arguments used to create the value.</param>
            <returns>The value created.</returns>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.Build(System.Reflection.ParameterInfo)">
            <summary>
                Builds a value for the specified parameter.
            </summary>
            <param name="parameterInfo">The parameter to build a value for.</param>
            <returns>The value created for the parameter.</returns>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.Build(System.Reflection.PropertyInfo,System.Object[])">
            <summary>
                Builds a value for the specified property.
            </summary>
            <param name="propertyInfo">The property to build a value for.</param>
            <param name="args">The arguments used to create the parent instance.</param>
            <returns>The value created for the property.</returns>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy.PopulateProperty(System.Reflection.PropertyInfo,System.Object,System.Object[])">
            <summary>
                Populates the specified property on the provided instance.
            </summary>
            <param name="propertyInfo">The property to populate.</param>
            <param name="instance">The instance being populated.</param>
            <param name="args">The arguments used to create <paramref name="instance" />.</param>
        </member>
        <member name="P:ModelBuilder.DefaultExecuteStrategy.BuildChain">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.DefaultExecuteStrategy.Configuration">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.DefaultExecuteStrategy.Log">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.DefaultExecuteStrategy`1">
            <summary>
                The <see cref="T:ModelBuilder.DefaultExecuteStrategy`1" />
                class is used to create and populate <typeparamref name="T" /> instances.
            </summary>
            <typeparam name="T">The type of instance to create and populate.</typeparam>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.DefaultExecuteStrategy" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy`1.#ctor(ModelBuilder.IBuildHistory,ModelBuilder.IBuildLog,ModelBuilder.IBuildProcessor)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.DefaultExecuteStrategy" /> class.
            </summary>
            <param name="buildHistory">The build history tracker.</param>
            <param name="buildLog">The build log.</param>
            <param name="buildProcessor">The build processor.</param>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy`1.Create(System.Object[])">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">
                No <see cref="T:ModelBuilder.ValueGenerators.IValueGenerator" /> or <see cref="T:ModelBuilder.TypeCreators.ITypeCreator" /> was found to
                generate a requested type.
            </exception>
            <exception cref="T:ModelBuilder.BuildException">Failed to generate a requested type.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultExecuteStrategy`1.Populate(`0)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.NotSupportedException">
                No <see cref="T:ModelBuilder.ValueGenerators.IValueGenerator" /> or <see cref="T:ModelBuilder.TypeCreators.ITypeCreator" /> was found to
                generate a requested type.
            </exception>
            <exception cref="T:ModelBuilder.BuildException">Failed to generate a requested type.</exception>
        </member>
        <member name="T:ModelBuilder.DefaultParameterResolver">
            <summary>
                The <see cref="T:ModelBuilder.DefaultParameterResolver" />
                class is used to determine the ordered set of parameters that need to be created.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultParameterResolver.#ctor(ModelBuilder.CacheLevel)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.DefaultParameterResolver" /> class.
            </summary>
            <param name="cacheLevel">The cache level to use for resolved parameters.</param>
        </member>
        <member name="M:ModelBuilder.DefaultParameterResolver.GetOrderedParameters(ModelBuilder.IBuildConfiguration,System.Reflection.MethodBase)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="P:ModelBuilder.DefaultParameterResolver.CacheLevel">
            <summary>
                Gets or sets whether identified parameters are cached.
            </summary>
            <returns>Returns the cache level to apply to parameters.</returns>
        </member>
        <member name="T:ModelBuilder.DefaultPropertyResolver">
            <summary>
                The <see cref="T:ModelBuilder.DefaultPropertyResolver" />
                class is used to provide default logic for resolving property information.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultPropertyResolver.#ctor(ModelBuilder.CacheLevel)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.DefaultPropertyResolver" /> class.
            </summary>
            <param name="cacheLevel">The cache level to use for resolved properties.</param>
        </member>
        <member name="M:ModelBuilder.DefaultPropertyResolver.GetOrderedProperties(ModelBuilder.IBuildConfiguration,System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="configuration" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.DefaultPropertyResolver.IsIgnored(ModelBuilder.IBuildConfiguration,System.Object,System.Reflection.PropertyInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.DefaultPropertyResolver.CanPopulate(System.Reflection.PropertyInfo)">
            <summary>
                Determines whether the specified property can be populated.
            </summary>
            <param name="propertyInfo">The property to evaluate.</param>
            <returns><c>true</c> if the property can be populated; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="P:ModelBuilder.DefaultPropertyResolver.CacheLevel">
            <summary>
                Gets or sets whether properties identified by <see cref="M:ModelBuilder.DefaultPropertyResolver.GetOrderedProperties(ModelBuilder.IBuildConfiguration,System.Type)" /> are cached.
            </summary>
            <returns>Returns the cache level to apply to properties.</returns>
        </member>
        <member name="T:ModelBuilder.DefaultTypeResolver">
            <summary>
                The <see cref="T:ModelBuilder.DefaultTypeResolver" />
                class provides the default implementation for resolving types to build.
            </summary>
        </member>
        <member name="M:ModelBuilder.DefaultTypeResolver.GetBuildType(ModelBuilder.IBuildConfiguration,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.DefaultTypeResolver.GetTypesToEvaluate(System.Type)">
            <summary>
            Gets the types to evaluate for compatibility with the specified type.
            </summary>
            <param name="requestedType">The requested type.</param>
            <returns>The set of types to evaluate.</returns>
        </member>
        <member name="T:ModelBuilder.ExecuteOrderRules.ExpressionExecuteOrderRule`1">
            <summary>
                The <see cref="T:ModelBuilder.ExecuteOrderRules.ExpressionExecuteOrderRule`1" />
                class is used to identify a property to determine the priority order in populating the property by
                <see cref="T:ModelBuilder.IExecuteStrategy" />.
            </summary>
            <typeparam name="T">The type being evaluated.</typeparam>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.ExpressionExecuteOrderRule`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32)">
            <summary>
                Creates a new instance of the <see cref="T:ModelBuilder.ExecuteOrderRules.ExpressionExecuteOrderRule`1" /> class.
            </summary>
            <param name="expression">The expression used to identify a property on a type.</param>
            <param name="priority">The execution order priority to apply to the property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.ExpressionExecuteOrderRule`1.IsMatch(System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.ExpressionExecuteOrderRule`1.IsMatch(System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.ExpressionExecuteOrderRule`1.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ExecuteOrderRules.ExpressionExecuteOrderRule`1.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ExecuteOrderRules.IExecuteOrderRule">
            <summary>
                The <see cref="T:ModelBuilder.ExecuteOrderRules.IExecuteOrderRule" />
                interface defines how a rule can identify the order in which properties should be populated by
                <see cref="T:ModelBuilder.IExecuteStrategy" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.IExecuteOrderRule.IsMatch(System.Reflection.ParameterInfo)">
            <summary>
                Returns whether the rule matches the specified parameter.
            </summary>
            <param name="parameterInfo">The parameter to evaluate.</param>
            <returns><c>true</c> if the parameter matches and the rule; otherwise <c>false</c>.</returns>
            <remarks>
                If the parameter matches the rule, the <see cref="T:ModelBuilder.IExecuteStrategy" /> should use the priority to evaluate
                ordering.
            </remarks>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.IExecuteOrderRule.IsMatch(System.Reflection.PropertyInfo)">
            <summary>
                Returns whether the rule matches the specified property.
            </summary>
            <param name="propertyInfo">The property to evaluate.</param>
            <returns><c>true</c> if the property matches and the rule; otherwise <c>false</c>.</returns>
            <remarks>
                If the property matches the rule, the <see cref="T:ModelBuilder.IExecuteStrategy" /> should use the priority to evaluate
                ordering.
            </remarks>
        </member>
        <member name="P:ModelBuilder.ExecuteOrderRules.IExecuteOrderRule.Priority">
            <summary>
                Gets the priority for this rule.
            </summary>
        </member>
        <member name="T:ModelBuilder.ExecuteOrderRules.ParameterPredicateExecuteOrderRule">
            <summary>
                The <see cref="T:ModelBuilder.ExecuteOrderRules.ParameterPredicateExecuteOrderRule" />
                class is used to match the rule to a <see cref="T:System.Reflection.PropertyInfo" /> using a predicate.
            </summary>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.ParameterPredicateExecuteOrderRule.#ctor(System.Predicate{System.Reflection.ParameterInfo},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ExecuteOrderRules.ParameterPredicateExecuteOrderRule" /> class.
            </summary>
            <param name="predicate">The predicate to evaluate.</param>
            <param name="priority">The execution order priority to apply to the parameter.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.ParameterPredicateExecuteOrderRule.IsMatch(System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.ParameterPredicateExecuteOrderRule.IsMatch(System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.ParameterPredicateExecuteOrderRule.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ExecuteOrderRules.ParameterPredicateExecuteOrderRule.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ExecuteOrderRules.PropertyPredicateExecuteOrderRule">
            <summary>
                The <see cref="T:ModelBuilder.ExecuteOrderRules.PropertyPredicateExecuteOrderRule" />
                class is used to match the rule to a <see cref="T:System.Reflection.PropertyInfo" /> using a predicate.
            </summary>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.PropertyPredicateExecuteOrderRule.#ctor(System.Predicate{System.Reflection.PropertyInfo},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ExecuteOrderRules.PropertyPredicateExecuteOrderRule" /> class.
            </summary>
            <param name="predicate">The predicate to evaluate.</param>
            <param name="priority">The execution order priority to apply to the property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.PropertyPredicateExecuteOrderRule.IsMatch(System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.PropertyPredicateExecuteOrderRule.IsMatch(System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.PropertyPredicateExecuteOrderRule.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ExecuteOrderRules.PropertyPredicateExecuteOrderRule.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ExecuteOrderRules.RegexExecuteOrderRule">
            <summary>
                The <see cref="T:ModelBuilder.ExecuteOrderRules.RegexExecuteOrderRule" />
                class is used to match a property on a type using a <see cref="T:System.Text.RegularExpressions.Regex" />
                on the property name to determine the priority order in populating the property by <see cref="T:ModelBuilder.IExecuteStrategy" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.RegexExecuteOrderRule.#ctor(System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
                Creates a new instance of the <see cref="T:ModelBuilder.ExecuteOrderRules.RegexExecuteOrderRule" /> class.
            </summary>
            <param name="expression">The expression used to match on property name.</param>
            <param name="priority">The execution order priority to apply to the property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.RegexExecuteOrderRule.IsMatch(System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.RegexExecuteOrderRule.IsMatch(System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteOrderRules.RegexExecuteOrderRule.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ExecuteOrderRules.RegexExecuteOrderRule.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ExecuteStrategyExtensions">
            <summary>
                The <see cref="T:ModelBuilder.ExecuteStrategyExtensions" />
                class is used to provide extension methods for the <see cref="T:ModelBuilder.IExecuteStrategy" /> interface.
            </summary>
        </member>
        <member name="M:ModelBuilder.ExecuteStrategyExtensions.WriteLog(ModelBuilder.IExecuteStrategy,System.Action{System.String})">
            <summary>
                Writes the log entry using the specified action after the execute strategy is invoked.
            </summary>
            <param name="executeStrategy">The execute strategy to invoke.</param>
            <param name="action">The logging action to call.</param>
            <returns>The execute strategy to invoke.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ExecuteStrategyExtensions.WriteLog``1(ModelBuilder.IExecuteStrategy{``0},System.Action{System.String})">
            <summary>
                Writes the log entry using the specified action after the execute strategy is invoked.
            </summary>
            <param name="executeStrategy">The execute strategy to invoke.</param>
            <param name="action">The logging action to call.</param>
            <typeparam name="T">The type of instance to create and populate.</typeparam>
            <returns>The execute strategy to invoke.</returns>
        </member>
        <member name="T:ModelBuilder.ExpressionExtensions">
            <summary>
                The <see cref="T:ModelBuilder.CommonExtensions" />
                class provides extension methods for the <see cref="T:System.Linq.Expressions.Expression`1" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ExpressionExtensions.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Gets the property from the specified expression.
            </summary>
            <typeparam name="T">The type that holds the property.</typeparam>
            <param name="expression">The expression that identifies a property on <typeparamref name="T" /></param>
            <returns>The property in the expression.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter does not represent a property.</exception>
            <exception cref="T:System.ArgumentException">
                The <paramref name="expression" /> parameter does not match a property on the type
                to generate.
            </exception>
        </member>
        <member name="T:ModelBuilder.IBuildChain">
            <summary>
                The <see cref="T:ModelBuilder.IBuildChain" />
                interface defines the properties that allow inspection of build chain values.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildChain.Count">
            <summary>
                Gets the number of items in the build chain.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildChain.First">
            <summary>
                Get the first item added to the build chain.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildChain.Last">
            <summary>
                Gets the last item added to the build chain.
            </summary>
        </member>
        <member name="T:ModelBuilder.IBuildConfiguration">
            <summary>
                The <see cref="T:ModelBuilder.IBuildConfiguration" />
                interface defines the configuration used to create and populate instances.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.ConstructorResolver">
            <summary>
                Gets or sets the constructor resolver used to create an instance of a type.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.CreationRules">
            <summary>
                Gets the creation rules used to quickly generate values without invoking <see cref="T:ModelBuilder.TypeCreators.ITypeCreator" /> or
                <see cref="T:ModelBuilder.ValueGenerators.IValueGenerator" /> instances.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.ExecuteOrderRules">
            <summary>
                Gets the execute order rules used to determine the order that properties are populated.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.IgnoreRules">
            <summary>
                Gets the ignore rules used to skip over property population.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.ParameterResolver">
            <summary>
                Gets or sets the parameter resolver used to create an instance of a type.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.PostBuildActions">
            <summary>
                Gets the post build actions used to modify instances after they have been created or populated.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.PropertyResolver">
            <summary>
                Gets or sets the property resolver used to populate an instance of a type.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.TypeCreators">
            <summary>
                Gets the type creators used to create instances.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.TypeMappingRules">
            <summary>
                Gets the rules used to map between types before attempting to create a value of the source type.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.TypeResolver">
            <summary>
                Gets or sets the type resolver used to determine the build type.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildConfiguration.ValueGenerators">
            <summary>
                Gets the value generators used to generate flat values.
            </summary>
        </member>
        <member name="T:ModelBuilder.IBuildHistory">
            <summary>
                The <see cref="T:ModelBuilder.IBuildHistory" />
                interface defines the members for adding and removing items from the build chain.
            </summary>
        </member>
        <member name="M:ModelBuilder.IBuildHistory.AddCapability(System.Type,ModelBuilder.BuildActions.IBuildCapability)">
            <summary>
                Adds a build capability for the specified type.
            </summary>
            <param name="type">The type being created.</param>
            <param name="capability">The build capability.</param>
        </member>
        <member name="M:ModelBuilder.IBuildHistory.GetCapability(System.Type)">
            <summary>
                Gets the build capability for the specified type.
            </summary>
            <param name="type">The type to build.</param>
            <returns>The build capability or <c>null</c> if no capability exists for the type.</returns>
        </member>
        <member name="M:ModelBuilder.IBuildHistory.Pop">
            <summary>
                Removes the last item added to the build chain.
            </summary>
        </member>
        <member name="M:ModelBuilder.IBuildHistory.Push(System.Object)">
            <summary>
                Tracks the specified item in the build chain.
            </summary>
            <param name="instance">The item to track.</param>
        </member>
        <member name="T:ModelBuilder.IBuildLog">
            <summary>
                The <see cref="T:ModelBuilder.IBuildLog" />
                interface defines the build operations that can be logged.
            </summary>
        </member>
        <member name="M:ModelBuilder.IBuildLog.BuildFailure(System.Exception)">
            <summary>
                Logs a build failure
            </summary>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CircularReferenceDetected(System.Type)">
            <summary>
                Logs that a circular reference was detected in the build chain.
            </summary>
            <param name="type">The type to create.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.Clear">
            <summary>
                Clears the current build log.
            </summary>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatedParameter(System.Reflection.ParameterInfo,System.Object)">
            <summary>
                Logs that a parameter has been created for a constructor.
            </summary>
            <param name="parameterInfo">The parameter that was created.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatedProperty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
                Logs that a property has been created for an instance.
            </summary>
            <param name="propertyInfo">The property that was created.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatedType(System.Type,System.Object)">
            <summary>
                Logs that a type has been created.
            </summary>
            <param name="type">The type created.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatingParameter(System.Reflection.ParameterInfo,System.Object)">
            <summary>
                Logs that a parameter is being created for a constructor.
            </summary>
            <param name="parameterInfo">The parameter being created.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatingProperty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
                Logs that a property is being created for an instance.
            </summary>
            <param name="propertyInfo">The property being created.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatingType(System.Type,System.Type,System.Object)">
            <summary>
                Logs that a type is being created.
            </summary>
            <param name="type">The type to create.</param>
            <param name="creatorType">The type of creator used to create the type.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.CreatingValue(System.Type,System.Type,System.Object)">
            <summary>
                Logs that a value is being created.
            </summary>
            <param name="type">The type to create.</param>
            <param name="generatorType">The type of generator used to create the value.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.IgnoringProperty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
                Logs that a property is being ignored for an instance.
            </summary>
            <param name="propertyInfo">The property that was ignored.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.MappedType(System.Type,System.Type)">
            <summary>
                Logs that a type mapping has occurred.
            </summary>
            <param name="source">The original type requested.</param>
            <param name="target">The type that will be created.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.PopulatedInstance(System.Object)">
            <summary>
                Logs that an instance has been populated.
            </summary>
            <param name="instance">The instance that has been populated.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.PopulatingInstance(System.Object)">
            <summary>
                Logs that an instance is being populated.
            </summary>
            <param name="instance">The instance being populated.</param>
        </member>
        <member name="M:ModelBuilder.IBuildLog.PostBuildAction(System.Type,System.Type,System.Object)">
            <summary>
                Logs that a type is running through post build actions.
            </summary>
            <param name="type">The type to create.</param>
            <param name="postBuildType">The type of the post build action.</param>
            <param name="context">The possible context object the value is being created for.</param>
        </member>
        <member name="P:ModelBuilder.IBuildLog.IsEnabled">
            <summary>
                Gets or sets whether logging is enabled.
            </summary>
        </member>
        <member name="P:ModelBuilder.IBuildLog.Output">
            <summary>
                Gets the output of the build log.
            </summary>
        </member>
        <member name="T:ModelBuilder.IBuildProcessor">
            <summary>
                The <see cref="T:ModelBuilder.IBuildProcessor" />
                interface defines the members for building a new value.
            </summary>
        </member>
        <member name="M:ModelBuilder.IBuildProcessor.GetBuildCapability(ModelBuilder.IExecuteStrategy,ModelBuilder.BuildActions.BuildRequirement,System.Type)">
            <summary>
                Gets the build capability for the specified type.
            </summary>
            <param name="executeStrategy">The execute strategy.</param>
            <param name="buildRequirement">The build capability.</param>
            <param name="type">The type to evaluate.</param>
            <returns>A <see cref="T:ModelBuilder.BuildActions.BuildCapability" /> indicating instance creation support via a <see cref="T:ModelBuilder.BuildActions.IBuildAction" />.</returns>
        </member>
        <member name="M:ModelBuilder.IBuildProcessor.GetBuildCapability(ModelBuilder.IExecuteStrategy,ModelBuilder.BuildActions.BuildRequirement,System.Reflection.ParameterInfo)">
            <summary>
                Gets the build capability for the specified parameter.
            </summary>
            <param name="executeStrategy">The execute strategy.</param>
            <param name="buildRequirement">The build capability.</param>
            <param name="parameterInfo">The parameter to evaluate.</param>
            <returns>A <see cref="T:ModelBuilder.BuildActions.BuildCapability" /> indicating instance creation support via a <see cref="T:ModelBuilder.BuildActions.IBuildAction" />.</returns>
        </member>
        <member name="M:ModelBuilder.IBuildProcessor.GetBuildCapability(ModelBuilder.IExecuteStrategy,ModelBuilder.BuildActions.BuildRequirement,System.Reflection.PropertyInfo)">
            <summary>
                Gets the build capability for the specified property.
            </summary>
            <param name="executeStrategy">The execute strategy.</param>
            <param name="buildRequirement">The build capability.</param>
            <param name="propertyInfo">The property to evaluate.</param>
            <returns>A <see cref="T:ModelBuilder.BuildActions.BuildCapability" /> indicating instance creation support via a <see cref="T:ModelBuilder.BuildActions.IBuildAction" />.</returns>
        </member>
        <member name="T:ModelBuilder.IConfigurationModule">
            <summary>
                The <see cref="T:ModelBuilder.IConfigurationModule" />
                interface is used to configure a <see cref="T:ModelBuilder.IBuildConfiguration" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.IConfigurationModule.Configure(ModelBuilder.IBuildConfiguration)">
            <summary>
                Configures the specified build configuration.
            </summary>
            <param name="configuration">The build configuration to update.</param>
        </member>
        <member name="T:ModelBuilder.IConstructorResolver">
            <summary>
                The <see cref="T:ModelBuilder.IConstructorResolver" />
                interface defines the members for resolving constructors.
            </summary>
        </member>
        <member name="M:ModelBuilder.IConstructorResolver.Resolve(System.Type,System.Object[])">
            <summary>
                Returns the <see cref="T:System.Reflection.ConstructorInfo" /> for the type, matching on the specified arguments.
            </summary>
            <param name="type">The type to evaluate.</param>
            <param name="args">The optional argument list for the constructor.</param>
            <returns>The constructor matching the type and arguments; or <c>null</c> if no constructor is found.</returns>
        </member>
        <member name="T:ModelBuilder.IExecuteStrategy">
            <summary>
                The <see cref="T:ModelBuilder.IExecuteStrategy" />
                interface defines the dependencies used to create and populate instances.
            </summary>
        </member>
        <member name="M:ModelBuilder.IExecuteStrategy.Create(System.Type,System.Object[])">
            <summary>
                Creates a new instance of the specified type with optional constructor arguments.
            </summary>
            <param name="type">The type of object to create.</param>
            <param name="args">The constructor arguments of the type.</param>
            <returns>A new instance of the specified type.</returns>
        </member>
        <member name="M:ModelBuilder.IExecuteStrategy.CreateParameters(System.Reflection.MethodBase)">
            <summary>
                Creates a set of parameters for the specified method.
            </summary>
            <param name="method">The method that defines the parameters.</param>
            <returns>An array of parameter values.</returns>
        </member>
        <member name="M:ModelBuilder.IExecuteStrategy.Initialize(ModelBuilder.IBuildConfiguration)">
            <summary>
                Initializes the execute strategy with a build configuration.
            </summary>
            <param name="configuration">The build configuration.</param>
        </member>
        <member name="M:ModelBuilder.IExecuteStrategy.Populate(System.Object)">
            <summary>
                Populates values onto settable properties of the specified instance.
            </summary>
            <param name="instance">The instance to populate.</param>
            <returns>The populated object.</returns>
        </member>
        <member name="P:ModelBuilder.IExecuteStrategy.BuildChain">
            <summary>
                Gets the build chain for objects up to the current build execution.
            </summary>
        </member>
        <member name="P:ModelBuilder.IExecuteStrategy.Configuration">
            <summary>
                Gets the build configuration.
            </summary>
        </member>
        <member name="P:ModelBuilder.IExecuteStrategy.Log">
            <summary>
                Gets the build log for items created by this strategy.
            </summary>
        </member>
        <member name="T:ModelBuilder.IExecuteStrategy`1">
            <summary>
                The <see cref="T:ModelBuilder.IExecuteStrategy`1" />
                interface defines the members for creating and populating <typeparamref name="T" /> instances.
            </summary>
            <typeparam name="T">The type to create or populate.</typeparam>
        </member>
        <member name="M:ModelBuilder.IExecuteStrategy`1.Create(System.Object[])">
            <summary>
                Creates a new instance of <typeparamref name="T" /> using any specified arguments.
            </summary>
            <param name="args">The constructor arguments of the type.</param>
            <returns>A new instance of <typeparamref name="T" /></returns>
        </member>
        <member name="M:ModelBuilder.IExecuteStrategy`1.Populate(`0)">
            <summary>
                Populates values onto settable properties of the specified instance.
            </summary>
            <param name="instance">The instance to populate.</param>
            <returns>A new instance of <typeparamref name="T" /></returns>
        </member>
        <member name="T:ModelBuilder.IgnoreRules.ExpressionIgnoreRule`1">
            <summary>
                The <see cref="T:ModelBuilder.IgnoreRules.ExpressionIgnoreRule`1" />
                class is used to identify a property on a type that should be ignored by <see cref="T:ModelBuilder.IExecuteStrategy" /> and not be
                populated.
            </summary>
            <typeparam name="T">The type being evaluated.</typeparam>
        </member>
        <member name="M:ModelBuilder.IgnoreRules.ExpressionIgnoreRule`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Creates a new instance of the <see cref="T:ModelBuilder.IgnoreRules.ExpressionIgnoreRule`1" /> class.
            </summary>
            <param name="expression">The expression used to identify a property on a type.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.IgnoreRules.ExpressionIgnoreRule`1.IsMatch(System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:ModelBuilder.IgnoreRules.IIgnoreRule">
            <summary>
                The <see cref="T:ModelBuilder.IgnoreRules.IIgnoreRule" />
                interface defines how a rule can identify a property that should be ignored by <see cref="T:ModelBuilder.IExecuteStrategy" /> and
                not populated with a value.
            </summary>
        </member>
        <member name="M:ModelBuilder.IgnoreRules.IIgnoreRule.IsMatch(System.Reflection.PropertyInfo)">
            <summary>
                Returns whether the rule matches the specified property.
            </summary>
            <param name="propertyInfo">The property to evaluate.</param>
            <returns><c>true</c> if the property matches and the rule; otherwise <c>false</c>.</returns>
            <remarks>If the property matches the rule, the <see cref="T:ModelBuilder.IExecuteStrategy" /> should not populate the property.</remarks>
        </member>
        <member name="T:ModelBuilder.IgnoreRules.PredicateIgnoreRule">
            <summary>
                The <see cref="T:ModelBuilder.IgnoreRules.PredicateIgnoreRule" />
                class is used to match the rule to a <see cref="T:System.Reflection.PropertyInfo" /> using a predicate.
            </summary>
        </member>
        <member name="M:ModelBuilder.IgnoreRules.PredicateIgnoreRule.#ctor(System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.IgnoreRules.PredicateIgnoreRule" /> class.
            </summary>
            <param name="predicate">The predicate to evaluate.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.IgnoreRules.PredicateIgnoreRule.IsMatch(System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:ModelBuilder.IgnoreRules.RegexIgnoreRule">
            <summary>
                The <see cref="T:ModelBuilder.IgnoreRules.RegexIgnoreRule" />
                class is used to match a property on a type using a <see cref="T:System.Text.RegularExpressions.Regex" />
                on the property name for whether the property should be ignored by <see cref="T:ModelBuilder.IExecuteStrategy" />
                and not be populated.
            </summary>
        </member>
        <member name="M:ModelBuilder.IgnoreRules.RegexIgnoreRule.#ctor(System.String)">
            <summary>
                Creates a new instance of the <see cref="T:ModelBuilder.IgnoreRules.RegexIgnoreRule" /> class.
            </summary>
            <param name="expression">The expression used to match on property name.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.IgnoreRules.RegexIgnoreRule.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
                Creates a new instance of the <see cref="T:ModelBuilder.IgnoreRules.RegexIgnoreRule" /> class.
            </summary>
            <param name="expression">The expression used to match on property name.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.IgnoreRules.RegexIgnoreRule.IsMatch(System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:ModelBuilder.INullableBuilder">
            <summary>
                The <see cref="T:ModelBuilder.INullableBuilder" />
                interface defines the members that control whether a <c>null</c> value can be built when a type is requested.
            </summary>
        </member>
        <member name="P:ModelBuilder.INullableBuilder.AllowNull">
            <summary>
                Gets or sets whether this type can return a <c>null</c> value.
            </summary>
        </member>
        <member name="P:ModelBuilder.INullableBuilder.NullPercentageChance">
            <summary>
                Gets or sets the percentage change that a null could be return when <see cref="P:ModelBuilder.INullableBuilder.AllowNull" /> is <c>true</c>.
            </summary>
        </member>
        <member name="T:ModelBuilder.IParameterResolver">
            <summary>
                The <see cref="T:ModelBuilder.IParameterResolver" />
                interface defines the members for getting parameters that need to be created.
            </summary>
        </member>
        <member name="M:ModelBuilder.IParameterResolver.GetOrderedParameters(ModelBuilder.IBuildConfiguration,System.Reflection.MethodBase)">
            <summary>
                Gets the parameters on <paramref name="method" /> that are to be populated in the order identified by
                <see cref="P:ModelBuilder.IBuildConfiguration.ExecuteOrderRules" />.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="method">The method used to create an object.</param>
            <returns>The set of parameters to populate in the order they are to be populated.</returns>
        </member>
        <member name="T:ModelBuilder.IPostBuildAction">
            <summary>
                The <see cref="T:ModelBuilder.IPostBuildAction" />
                interface defines the members for running post-build actions on models created by <see cref="T:ModelBuilder.IExecuteStrategy" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.IPostBuildAction.Execute(ModelBuilder.IBuildChain,System.Object,System.Type)">
            <summary>
                Executes the post build action for an object created by type.
            </summary>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="instance">The object that was built.</param>
            <param name="type">The type of value to evaluate.</param>
        </member>
        <member name="M:ModelBuilder.IPostBuildAction.Execute(ModelBuilder.IBuildChain,System.Object,System.Reflection.ParameterInfo)">
            <summary>
                Executes the post build action for an object created by parameter.
            </summary>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="instance">The object that was built.</param>
            <param name="parameterInfo">The parameter to evaluate.</param>
        </member>
        <member name="M:ModelBuilder.IPostBuildAction.Execute(ModelBuilder.IBuildChain,System.Object,System.Reflection.PropertyInfo)">
            <summary>
                Executes the post build action for an object create by property.
            </summary>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="instance">The object that was built.</param>
            <param name="propertyInfo">The property to evaluate.</param>
        </member>
        <member name="M:ModelBuilder.IPostBuildAction.IsMatch(ModelBuilder.IBuildChain,System.Type)">
            <summary>
                Returns whether the specified type matches this action.
            </summary>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="type">The type to evaluate.</param>
            <returns><c>true</c> if the type matches this action; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.IPostBuildAction.IsMatch(ModelBuilder.IBuildChain,System.Reflection.ParameterInfo)">
            <summary>
                Returns whether the specified parameter matches this action.
            </summary>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="parameterInfo">The parameter to evaluate.</param>
            <returns><c>true</c> if the type matches this action; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.IPostBuildAction.IsMatch(ModelBuilder.IBuildChain,System.Reflection.PropertyInfo)">
            <summary>
                Returns whether the specified property matches this action.
            </summary>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="propertyInfo">The property to evaluate.</param>
            <returns><c>true</c> if the type matches this action; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ModelBuilder.IPostBuildAction.Priority">
            <summary>
                Gets the priority for this type.
            </summary>
        </member>
        <member name="T:ModelBuilder.IPropertyResolver">
            <summary>
                The <see cref="T:ModelBuilder.IPropertyResolver" />
                interface defines the members for resolving information about properties.
            </summary>
        </member>
        <member name="M:ModelBuilder.IPropertyResolver.GetOrderedProperties(ModelBuilder.IBuildConfiguration,System.Type)">
            <summary>
                Gets the properties on <paramref name="targetType" /> that are to be populated in the order identified by
                <see cref="P:ModelBuilder.IBuildConfiguration.ExecuteOrderRules" />.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="targetType">The target type to populate.</param>
            <returns>The set of properties to populate in the order they are to be populated.</returns>
        </member>
        <member name="M:ModelBuilder.IPropertyResolver.IsIgnored(ModelBuilder.IBuildConfiguration,System.Object,System.Reflection.PropertyInfo,System.Object[])">
            <summary>
                Determines whether the property should be populated with a value based on arguments provided.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="instance">The instance being populated.</param>
            <param name="propertyInfo">The property to evaluate.</param>
            <param name="args">The constructor parameters for the instance.</param>
            <returns><c>true</c> if the property should be populated; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:ModelBuilder.IRandomGenerator">
            <summary>
                The <see cref="T:ModelBuilder.IRandomGenerator" />
                interface defines the members for generating random numeric values.
            </summary>
        </member>
        <member name="M:ModelBuilder.IRandomGenerator.GetMax(System.Type)">
            <summary>
                Gets the maximum value for the specified type.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>The maximum value for the type.</returns>
        </member>
        <member name="M:ModelBuilder.IRandomGenerator.GetMin(System.Type)">
            <summary>
                Gets the minimum value for the specified type.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>The minimum value for the type.</returns>
        </member>
        <member name="M:ModelBuilder.IRandomGenerator.IsSupported(System.Type)">
            <summary>
                Gets whether the specified type is supported by the generator.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns><c>true</c> if the type is supported; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.IRandomGenerator.NextValue(System.Type,System.Object,System.Object)">
            <summary>
                Generates a new random value constrained to the specified minimum and maximum boundaries.
            </summary>
            <param name="type">The type of number to generate.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A new random value.</returns>
        </member>
        <member name="M:ModelBuilder.IRandomGenerator.NextValue(System.Byte[])">
            <summary>
                Populates the specified buffer with random bytes.
            </summary>
        </member>
        <member name="T:ModelBuilder.ITypeResolver">
            <summary>
                The <see cref="T:ModelBuilder.ITypeResolver" />
                interface defines the members for resolving a type to build.
            </summary>
        </member>
        <member name="M:ModelBuilder.ITypeResolver.GetBuildType(ModelBuilder.IBuildConfiguration,System.Type)">
            <summary>
                Gets the type to build based on the specified type.
            </summary>
            <param name="configuration"></param>
            <param name="requestedType">The type being requested.</param>
            <returns>The type to build.</returns>
        </member>
        <member name="T:ModelBuilder.Model">
            <summary>
                The <see cref="T:ModelBuilder.Model" />
                class provides the main entry point into generating model instances.
            </summary>
        </member>
        <member name="M:ModelBuilder.Model.Create(System.Type,System.Object[])">
            <summary>
                Creates an instance of a type using the default build and execute strategies and constructor any provided
                arguments.
            </summary>
            <param name="instanceType">The type of instance to create.</param>
            <param name="args">The constructor arguments to create the type with.</param>
            <returns>The new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceType" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.Model.Create``1(System.Object[])">
            <summary>
                Creates an instance of <typeparamref name="T" /> using the default build and execute strategies and any provided
                constructor
                arguments.
            </summary>
            <typeparam name="T">The type of instance to create.</typeparam>
            <param name="args">The constructor arguments to create the type with.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:ModelBuilder.Model.Ignoring``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Returns a <see cref="T:ModelBuilder.IBuildConfiguration" /> with a new <see cref="T:ModelBuilder.IgnoreRules.IIgnoreRule" /> that matches the specified
                expression.
            </summary>
            <typeparam name="T">The type of instance that matches the rule.</typeparam>
            <param name="expression">The expression that identifies a property on <typeparamref name="T" /></param>
            <returns>A new build configuration.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.Model.Mapping``2">
            <summary>
                Returns a <see cref="T:ModelBuilder.IBuildConfiguration" /> with a new <see cref="T:ModelBuilder.TypeMappingRule" /> that matches the specified
                expression.
            </summary>
            <typeparam name="TSource">The source type to use for type mapping.</typeparam>
            <typeparam name="TTarget">The target type to use for type mapping.</typeparam>
            <returns>A new build configuration.</returns>
        </member>
        <member name="M:ModelBuilder.Model.Populate``1(``0)">
            <summary>
                Populates the properties of the specified instance using the default build and execute strategies.
            </summary>
            <typeparam name="T">The type of instance to create.</typeparam>
            <returns>The new instance.</returns>
        </member>
        <member name="M:ModelBuilder.Model.UsingDefaultConfiguration">
            <summary>
                Returns a new <see cref="T:ModelBuilder.IBuildConfiguration" /> that is configured using <see cref="T:ModelBuilder.DefaultConfigurationModule" />
                .
            </summary>
            <returns>The new build configuration.</returns>
        </member>
        <member name="M:ModelBuilder.Model.UsingExecuteStrategy``1">
            <summary>
                Returns a new execute strategy configured with <see cref="T:ModelBuilder.DefaultConfigurationModule" />.
            </summary>
            <typeparam name="T">The type of execute strategy to create.</typeparam>
            <returns>A new execute strategy.</returns>
        </member>
        <member name="M:ModelBuilder.Model.UsingModule``1">
            <summary>
                Returns a configuration using the specified <see cref="T:ModelBuilder.IConfigurationModule" />.
            </summary>
            <typeparam name="T">The type of configuration module to use.</typeparam>
            <returns>The build configuration.</returns>
        </member>
        <member name="M:ModelBuilder.Model.WriteLog``1(System.Action{System.String})">
            <summary>
                Writes the log entry using the specified action after the execute strategy is invoked.
            </summary>
            <typeparam name="T">The type of instance to create and populate.</typeparam>
            <param name="action">The logging action to call.</param>
            <returns>The execute strategy to invoke.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.Model.WriteLog(System.Action{System.String})">
            <summary>
                Writes the log entry using the specified action after the execute strategy is invoked.
            </summary>
            <param name="action">The logging action to call.</param>
            <returns>The execute strategy to invoke.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:ModelBuilder.NameExpression">
            <summary>
                The <see cref="T:ModelBuilder.NameExpression" />
                class defines regular expressions for matching values.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.Age">
            <summary>
                Defines the expression for matching age properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.City">
            <summary>
                Defines the expression for matching city properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.Country">
            <summary>
                Defines the expression for matching country properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.DateOfBirth">
            <summary>
                Defines the expression for matching DOB properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.Domain">
            <summary>
                Defines the expression for matching domain properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.Email">
            <summary>
                Defines the expression for matching email properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.FirstName">
            <summary>
                Defines the expression for matching first/given name properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.Gender">
            <summary>
                Defines the expression for matching gender/sex properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.LastName">
            <summary>
                Defines the expression for matching last name/surname properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.MiddleName">
            <summary>
                Defines the expression for matching middle name properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.PostCode">
            <summary>
                Defines the expression for matching postcode properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.State">
            <summary>
                Defines the expression for matching state properties.
            </summary>
        </member>
        <member name="F:ModelBuilder.NameExpression.TimeZone">
            <summary>
                Defines the expression for matching timezone properties.
            </summary>
        </member>
        <member name="T:ModelBuilder.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.ArgumentException_NullOrWhiteSpace">
            <summary>
              Looks up a localized string similar to The value cannot be null, white space or empty.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.ConstructorResolver_NoPublicConstructorFound">
            <summary>
              Looks up a localized string similar to No public constructor is available for type {0}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.ConstructorResolver_NoValidConstructorFound">
            <summary>
              Looks up a localized string similar to No valid constructors are available for type {0}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CircularReferenceDetected">
            <summary>
              Looks up a localized string similar to Detected circular reference building type {0}, using previously created instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatedParameter">
            <summary>
              Looks up a localized string similar to Created parameter {0} ({1}) for type {2}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatedProperty">
            <summary>
              Looks up a localized string similar to Created property {0} ({1}) on type {2}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatedType">
            <summary>
              Looks up a localized string similar to End creating type {0}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatingParameter">
            <summary>
              Looks up a localized string similar to Creating parameter {0} ({1}) for type {2}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatingProperty">
            <summary>
              Looks up a localized string similar to Creating property {0} ({1}) on type {2}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatingType">
            <summary>
              Looks up a localized string similar to Start creating type {0} using {1}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_CreatingValue">
            <summary>
              Looks up a localized string similar to Creating {0} value using {1}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_IgnoringProperty">
            <summary>
              Looks up a localized string similar to Ignoring property {0} ({1}) on type {2}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_MappingType">
            <summary>
              Looks up a localized string similar to Mapped type requested from {0} to {1}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_PopulatedInstance">
            <summary>
              Looks up a localized string similar to End populating instance {0}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_PopulatingInstance">
            <summary>
              Looks up a localized string similar to Start populating instance {0}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultBuildLog_PostBuild">
            <summary>
              Looks up a localized string similar to Running PostBuild on {0} using {1}.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.DefaultTypeCreator_NoMatchingConstructor">
            <summary>
              Looks up a localized string similar to No constructor found matching type..
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.Error_ExpressionNotPropertyFormat">
            <summary>
              Looks up a localized string similar to Expression &apos;{0}&apos; does not refer to a property.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.Error_ExpressionTargetsWrongType">
            <summary>
              Looks up a localized string similar to The expression returned a property {0} that was not defined on type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.Error_GenerationNotSupportedFormat">
            <summary>
              Looks up a localized string similar to {0} does not support the {1} type and reference name {2} in the context of the current build chain.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.Error_TypeNotSupportedFormat">
            <summary>
              Looks up a localized string similar to {0} does not support the {1} type.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.ExecuteStrategy_NoBuildChain">
            <summary>
              Looks up a localized string similar to The BuildChain property on the execution strategy is null.
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.ExpressionCreationRule_CreateWithParameterNotSupported">
            <summary>
              Looks up a localized string similar to The class does not support creating values for parameters..
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.ExpressionCreationRule_CreateWithTypeNotSupported">
            <summary>
              Looks up a localized string similar to The class does not support creating values for types..
            </summary>
        </member>
        <member name="P:ModelBuilder.Properties.Resources.TypeMappingRule_TypeNotAssignable">
            <summary>
              Looks up a localized string similar to The type {0} is not assignable to {1}.
            </summary>
        </member>
        <member name="T:ModelBuilder.RandomGenerator">
            <summary>
                The <see cref="T:ModelBuilder.RandomGenerator" />
                class is used to build random numeric values and byte arrays.
            </summary>
        </member>
        <member name="M:ModelBuilder.RandomGenerator.GetMax(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.RandomGenerator.GetMin(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.RandomGenerator.IsSupported(System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.RandomGenerator.NextValue(System.Type,System.Object,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="min" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="max" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.RandomGenerator.NextValue(System.Byte[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:ModelBuilder.RandomGeneratorExtensions">
            <summary>
                The <see cref="T:ModelBuilder.RandomGeneratorExtensions" />
                class provides extension methods for the <see cref="T:ModelBuilder.IRandomGenerator" /> interface.
            </summary>
        </member>
        <member name="M:ModelBuilder.RandomGeneratorExtensions.NextValue``1(ModelBuilder.IRandomGenerator)">
            <summary>
                Generates a new random value constrained to the specified maximum boundary.
            </summary>
            <param name="generator">The generator.</param>
            <returns>A new random value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.RandomGeneratorExtensions.NextValue``1(ModelBuilder.IRandomGenerator,``0)">
            <summary>
                Generates a new random value constrained to the specified maximum boundary.
            </summary>
            <param name="generator">The generator.</param>
            <param name="max">The maximum value.</param>
            <returns>A new random value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.RandomGeneratorExtensions.NextValue``1(ModelBuilder.IRandomGenerator,``0,``0)">
            <summary>
                Generates a new random value constrained to the specified minimum and maximum boundaries.
            </summary>
            <param name="generator">The generator.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>A new random value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generator" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.RandomGeneratorExtensions.NextValue(ModelBuilder.IRandomGenerator,System.Type)">
            <summary>
                Generates a new random value constrained to the specified maximum boundary.
            </summary>
            <param name="generator">The generator.</param>
            <param name="type">The type of number to generate.</param>
            <returns>A new random value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generator" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.RandomGeneratorExtensions.NextValue(ModelBuilder.IRandomGenerator,System.Type,System.Object)">
            <summary>
                Generates a new random value constrained to the specified maximum boundary.
            </summary>
            <param name="generator">The generator.</param>
            <param name="max">The maximum value.</param>
            <param name="type">The type of number to generate.</param>
            <returns>A new random value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generator" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:ModelBuilder.SetEachExtensions">
            <summary>
                The <see cref="T:ModelBuilder.SetEachExtensions" />
                class provides SetEach extension methods.
            </summary>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="T">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEach``1(System.Collections.Generic.IList{``0},System.Action{``0})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="T">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEach``1(System.Collections.Generic.IReadOnlyList{``0},System.Action{``0})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="T">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEach``1(System.Collections.Generic.List{``0},System.Action{``0})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="T">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEach``1(System.Collections.ObjectModel.Collection{``0},System.Action{``0})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="T">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEach``1(System.Collections.Generic.ICollection{``0},System.Action{``0})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="T">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEach``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Action{``0})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="T">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEach``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Action{``0})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="T">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="TKey">The type of key used in the dictionary.</typeparam>
            <typeparam name="TValue">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEach``2(System.Collections.Generic.Dictionary{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="TKey">The type of key used in the dictionary.</typeparam>
            <typeparam name="TValue">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEach``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="TKey">The type of key used in the dictionary.</typeparam>
            <typeparam name="TValue">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEach``2(System.Collections.ObjectModel.ReadOnlyDictionary{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="TKey">The type of key used in the dictionary.</typeparam>
            <typeparam name="TValue">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEachExplicit``2(``0,System.Action{``1})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="TList">The type of list to configure.</typeparam>
            <typeparam name="TEntry">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.SetEachExtensions.SetEachExplicit``3(``0,System.Action{System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
                Sets values on each instance in a set.
            </summary>
            <typeparam name="TDictionary">The type of dictionary to configure.</typeparam>
            <typeparam name="TKey">The type of key to configure.</typeparam>
            <typeparam name="TValue">The type of instance to configure.</typeparam>
            <param name="instances">The instances.</param>
            <param name="action">The configuration action.</param>
            <returns>A list of the instances.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instances" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="T:ModelBuilder.TypeCreators.ArrayTypeCreator">
            <summary>
                The <see cref="T:ModelBuilder.TypeCreators.ArrayTypeCreator" />
                class is used to create an instance from array types.
            </summary>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ArrayTypeCreator.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ArrayTypeCreator.CanPopulate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ArrayTypeCreator.CreateChildItem(System.Type,ModelBuilder.IExecuteStrategy,System.Object)">
            <summary>
                Creates a child item given the context of a possible previous item being created.
            </summary>
            <param name="type">The type of value to generate.</param>
            <param name="executeStrategy">The execute strategy.</param>
            <param name="previousItem">The previous item generated, or <c>null</c>.</param>
            <returns>The new item generated.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ArrayTypeCreator.CreateInstance(ModelBuilder.IExecuteStrategy,System.Type,System.String,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ArrayTypeCreator.PopulateInstance(ModelBuilder.IExecuteStrategy,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="P:ModelBuilder.TypeCreators.ArrayTypeCreator.AutoPopulate">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.TypeCreators.ArrayTypeCreator.MaxCount">
            <summary>
                Gets or sets the maximum count generated by this instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.TypeCreators.ArrayTypeCreator.MinCount">
            <summary>
                Gets or sets the minimum count generated by this instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.TypeCreators.ArrayTypeCreator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.TypeCreators.DefaultTypeCreator">
            <summary>
                The <see cref="T:ModelBuilder.TypeCreators.DefaultTypeCreator" />
                class is used to create an instance of a type using the constructors that match any arguments supplied.
            </summary>
        </member>
        <member name="M:ModelBuilder.TypeCreators.DefaultTypeCreator.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.TypeCreators.DefaultTypeCreator.CreateInstance(ModelBuilder.IExecuteStrategy,System.Type,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.TypeCreators.DefaultTypeCreator.PopulateInstance(ModelBuilder.IExecuteStrategy,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.TypeCreators.EnumerableTypeCreator">
            <summary>
                The <see cref="T:ModelBuilder.TypeCreators.EnumerableTypeCreator" />
                class is used to create an instance from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> type.
            </summary>
        </member>
        <member name="M:ModelBuilder.TypeCreators.EnumerableTypeCreator.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.EnumerableTypeCreator.CanPopulate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.EnumerableTypeCreator.Create(ModelBuilder.IExecuteStrategy,System.Type,System.String,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.EnumerableTypeCreator.CreateChildItem(System.Type,ModelBuilder.IExecuteStrategy,System.Object)">
            <summary>
                Creates a child item given the context of a possible previous item being created.
            </summary>
            <param name="type">The type of value to generate.</param>
            <param name="executeStrategy">The execute strategy.</param>
            <param name="previousItem">The previous item generated, or <c>null</c>.</param>
            <returns>The new item generated.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.EnumerableTypeCreator.CreateInstance(ModelBuilder.IExecuteStrategy,System.Type,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.TypeCreators.EnumerableTypeCreator.PopulateInstance(ModelBuilder.IExecuteStrategy,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.TypeCreators.EnumerableTypeCreator.AutoPopulate">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.TypeCreators.EnumerableTypeCreator.MaxCount">
            <summary>
                Gets or sets the maximum count generated by this instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.TypeCreators.EnumerableTypeCreator.MinCount">
            <summary>
                Gets or sets the minimum count generated by this instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.TypeCreators.EnumerableTypeCreator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.TypeCreators.FactoryTypeCreator">
            <summary>
                The <see cref="T:ModelBuilder.TypeCreators.FactoryTypeCreator" />
                class is used to create a value using a static factory method found on the type.
            </summary>
        </member>
        <member name="M:ModelBuilder.TypeCreators.FactoryTypeCreator.#ctor(ModelBuilder.CacheLevel)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.TypeCreators.FactoryTypeCreator" /> class.
            </summary>
            <param name="cacheLevel">The cache level to use for resolved methods.</param>
        </member>
        <member name="M:ModelBuilder.TypeCreators.FactoryTypeCreator.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.TypeCreators.FactoryTypeCreator.CreateInstance(ModelBuilder.IExecuteStrategy,System.Type,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.TypeCreators.FactoryTypeCreator.PopulateInstance(ModelBuilder.IExecuteStrategy,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.TypeCreators.FactoryTypeCreator.CacheLevel">
            <summary>
                Gets or sets whether resolved factory methods are cached.
            </summary>
            <returns>Returns the cache level to apply to methods.</returns>
        </member>
        <member name="P:ModelBuilder.TypeCreators.FactoryTypeCreator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.TypeCreators.ITypeCreator">
            <summary>
                The <see cref="T:ModelBuilder.TypeCreators.ITypeCreator" />
                interface defines the members for creating an instance of a type.
            </summary>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ITypeCreator.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type)">
            <summary>
                Returns whether this type creator can create the specified type.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="type">The type to evaluate.</param>
            <returns><c>true</c> if this creator can create the type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ITypeCreator.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.ParameterInfo)">
            <summary>
                Returns whether this type creator can create the specified type.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="parameterInfo">The parameter to evaluate.</param>
            <returns><c>true</c> if this creator can create the type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ITypeCreator.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.PropertyInfo)">
            <summary>
                Returns whether this type creator can create the specified type.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="propertyInfo">The property to evaluate.</param>
            <returns><c>true</c> if this creator can create the type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ITypeCreator.CanPopulate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type)">
            <summary>
                Returns whether this type creator can populate the specified type.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="type">The type to evaluate.</param>
            <returns><c>true</c> if this creator can populate the type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ITypeCreator.CanPopulate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.ParameterInfo)">
            <summary>
                Returns whether this type creator can populate the specified type.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="parameterInfo">The parameter to evaluate.</param>
            <returns><c>true</c> if this creator can populate the type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ITypeCreator.CanPopulate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.PropertyInfo)">
            <summary>
                Returns whether this type creator can populate the specified type.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="propertyInfo">The property to evaluate.</param>
            <returns><c>true</c> if this creator can populate the type; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ITypeCreator.Create(ModelBuilder.IExecuteStrategy,System.Type,System.Object[])">
            <summary>
                Creates an instance of the type with the specified arguments.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="type">The type of instance to create.</param>
            <param name="args">The constructor parameters to create the instance with.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ITypeCreator.Create(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo,System.Object[])">
            <summary>
                Creates an instance of the type with the specified arguments.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="parameterInfo">The parameter to evaluate.</param>
            <param name="args">The constructor parameters to create the instance with.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ITypeCreator.Create(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo,System.Object[])">
            <summary>
                Creates an instance of the type with the specified arguments.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="propertyInfo">The property to evaluate.</param>
            <param name="args">The constructor parameters to create the instance with.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreators.ITypeCreator.Populate(ModelBuilder.IExecuteStrategy,System.Object)">
            <summary>
                Populates the specified instance using an execution strategy.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="instance">The instance to populate.</param>
            <returns>The populated instance.</returns>
        </member>
        <member name="P:ModelBuilder.TypeCreators.ITypeCreator.AutoPopulate">
            <summary>
                Gets whether this creator identifies that properties on the instance should be automatically populated.
            </summary>
        </member>
        <member name="P:ModelBuilder.TypeCreators.ITypeCreator.Priority">
            <summary>
                Gets the priority for this creator.
            </summary>
        </member>
        <member name="T:ModelBuilder.TypeCreators.SingletonTypeCreator">
            <summary>
                The <see cref="T:ModelBuilder.TypeCreators.SingletonTypeCreator" />
                class is used to create a value using a Singleton property found on the type.
            </summary>
        </member>
        <member name="M:ModelBuilder.TypeCreators.SingletonTypeCreator.#ctor(ModelBuilder.CacheLevel)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.TypeCreators.SingletonTypeCreator" /> class.
            </summary>
            <param name="cacheLevel">The cache level to use for resolved methods.</param>
        </member>
        <member name="M:ModelBuilder.TypeCreators.SingletonTypeCreator.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.TypeCreators.SingletonTypeCreator.CreateInstance(ModelBuilder.IExecuteStrategy,System.Type,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.TypeCreators.SingletonTypeCreator.PopulateInstance(ModelBuilder.IExecuteStrategy,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.TypeCreators.SingletonTypeCreator.CacheLevel">
            <summary>
                Gets or sets whether resolved singleton properties are cached.
            </summary>
            <returns>Returns the cache level to apply to properties.</returns>
        </member>
        <member name="P:ModelBuilder.TypeCreators.SingletonTypeCreator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.TypeCreators.StructTypeCreator">
            <summary>
                The <see cref="T:ModelBuilder.TypeCreators.StructTypeCreator" />
                class is used to create an instance of a struct.
            </summary>
        </member>
        <member name="M:ModelBuilder.TypeCreators.StructTypeCreator.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.TypeCreators.StructTypeCreator.CreateInstance(ModelBuilder.IExecuteStrategy,System.Type,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.TypeCreators.StructTypeCreator.PopulateInstance(ModelBuilder.IExecuteStrategy,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.TypeCreators.StructTypeCreator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.TypeCreators.TypeCreatorBase">
            <summary>
                The <see cref="T:ModelBuilder.TypeCreators.TypeCreatorBase" />
                class is used to provide the common implementation of a type creator.
            </summary>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.CanPopulate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.CanPopulate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.CanPopulate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.Create(ModelBuilder.IExecuteStrategy,System.Type,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.Create(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.Create(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo,System.Object[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.Populate(ModelBuilder.IExecuteStrategy,System.Object)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.CanCreate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type,System.String)">
            <summary>
                Returns whether this type creator can create the specified type.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="type">The type to evaluate.</param>
            <param name="referenceName">The property or parameter name to evaluate.</param>
            <returns><c>true</c> if this creator can create the type; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.CanPopulate(ModelBuilder.IBuildConfiguration,ModelBuilder.IBuildChain,System.Type,System.String)">
            <summary>
                Returns whether this type creator can populate the specified type.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="type">The type to evaluate.</param>
            <param name="referenceName">The property or parameter name to evaluate.</param>
            <returns><c>true</c> if this creator can populate the type; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.Create(ModelBuilder.IExecuteStrategy,System.Type,System.String,System.Object[])">
            <summary>
                Creates an instance of the type with the specified arguments.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="type">The type to evaluate.</param>
            <param name="referenceName">The property or parameter name to evaluate.</param>
            <param name="args">The constructor parameters to create the instance with.</param>
            <returns>A new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.CreateInstance(ModelBuilder.IExecuteStrategy,System.Type,System.String,System.Object[])">
            <summary>
                Creates an instance of the type with the specified arguments.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="type">The type of instance to create.</param>
            <param name="referenceName">Identifies the possible parameter or property name the instance is intended for.</param>
            <param name="args">The constructor parameters to create the instance with.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.PopulateInstance(ModelBuilder.IExecuteStrategy,System.Object)">
            <summary>
                Populates the specified instance using an execution strategy.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="instance">The instance to populate.</param>
            <returns>The populated instance.</returns>
        </member>
        <member name="M:ModelBuilder.TypeCreators.TypeCreatorBase.ResolveBuildType(ModelBuilder.IBuildConfiguration,System.Type)">
            <summary>
                Resolves the type to build based on the specified type.
            </summary>
            <param name="buildConfiguration">The build configuration.</param>
            <param name="requestedType">The requested type.</param>
            <returns>The type to build.</returns>
        </member>
        <member name="P:ModelBuilder.TypeCreators.TypeCreatorBase.AutoPopulate">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.TypeCreators.TypeCreatorBase.Priority">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.TypeCreators.TypeCreatorBase.Generator">
            <summary>
                Gets the random generator for this instance.
            </summary>
        </member>
        <member name="T:ModelBuilder.TypeMappingRule">
            <summary>
                The <see cref="T:ModelBuilder.TypeMappingRule" />
                class defines a mapping between two types.
            </summary>
        </member>
        <member name="M:ModelBuilder.TypeMappingRule.#ctor(System.Type,System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.TypeMappingRule" /> class.
            </summary>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceType" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="P:ModelBuilder.TypeMappingRule.SourceType">
            <summary>
                Gets the source type.
            </summary>
        </member>
        <member name="P:ModelBuilder.TypeMappingRule.TargetType">
            <summary>
                Gets the target type.
            </summary>
        </member>
        <member name="T:ModelBuilder.ValueGenerators.AddressValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.AddressValueGenerator" />
                class is used to generate postal addressing values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.AddressValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.AddressValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.AddressValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.AddressValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.AgeValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.AgeValueGenerator" />
                class is used to generate numbers that should represent a persons age.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.AgeValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.AddressValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.AgeValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.ValueGenerators.AgeValueGenerator.IsMatch(ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.AgeValueGenerator.AllowNull">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.AgeValueGenerator.MaxAge">
            <summary>
                Gets or sets the maximum age generated by this instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.ValueGenerators.AgeValueGenerator.MinAge">
            <summary>
                Gets or sets the minimum age generated by this instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.ValueGenerators.AgeValueGenerator.NullPercentageChance">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.AgeValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.BooleanValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.BooleanValueGenerator" />
                class is used to generate random <see cref="T:System.Boolean" /> values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.BooleanValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.BooleanValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.BooleanValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.BooleanValueGenerator.AllowNull">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.BooleanValueGenerator.NullPercentageChance">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.CityValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.CityValueGenerator" />
                class is used to generate random city values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.CityValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.CityValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.CityValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.CityValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.CompanyValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.CompanyValueGenerator" />
                class is used to generate random company name values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.CompanyValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.CompanyValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.CompanyValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.CompanyValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.CountryValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.CountryValueGenerator" />
                class is used to generate random country values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.CountryValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.CountryValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.CountryValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.CountryValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.CountValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.CountValueGenerator" />
                class is used to generate numeric values for parameters and properties that look like count or length values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.CountValueGenerator.IsMatch(ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.ValueGenerators.CountValueGenerator.GetMaximum(System.Type,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.ValueGenerators.CountValueGenerator.GetMinimum(System.Type,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.CountValueGenerator.MaxCount">
            <summary>
                Gets or sets the maximum count generated by this instance.
            </summary>
        </member>
        <member name="P:ModelBuilder.ValueGenerators.CountValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.CultureValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.CultureValueGenerator" />
                class is used to generate random culture values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.CultureValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.DomainNameValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.CultureValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.CultureValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.DateOfBirthValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.DateOfBirthValueGenerator" />
                class is used to generate random date of birth values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.DateOfBirthValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.DateTimeValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.DateOfBirthValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.DateOfBirthValueGenerator.AllowNull">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.DateOfBirthValueGenerator.NullPercentageChance">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.DateOfBirthValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.DateTimeValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.DateTimeValueGenerator" />
                class is used to generate random date time values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.DateTimeValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.DateTimeValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.DateTimeValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.DateTimeValueGenerator.AllowNull">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.DateTimeValueGenerator.NullPercentageChance">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.DomainNameValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.DomainNameValueGenerator" />
                class is used to generate random domain name values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.DomainNameValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.DomainNameValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.DomainNameValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.DomainNameValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.EmailValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.EmailValueGenerator" />
                class is used to generate strings that should represent an email.
            </summary>
        </member>
        <member name="F:ModelBuilder.ValueGenerators.EmailValueGenerator.SpecialCharacters">
            <summary>
                Gets the expression to identify special characters.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.EmailValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.EmailValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.EmailValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.EmailValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.EmailValueGenerator.Domain">
            <summary>
                Gets the domain for the email address.
            </summary>
            <value>The domain part of the email address.</value>
        </member>
        <member name="T:ModelBuilder.ValueGenerators.EnumValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.EnumValueGenerator" />
                class is used to generate random enum values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.EnumValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.ValueGenerators.EnumValueGenerator.IsMatch(ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="P:ModelBuilder.ValueGenerators.EnumValueGenerator.AllowNull">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.EnumValueGenerator.NullPercentageChance">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.FirstNameValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.FirstNameValueGenerator" />
                class is used to generate random first name values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.FirstNameValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.FirstNameValueGenerator" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.FirstNameValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.FirstNameValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.GenderValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.GenderValueGenerator" />
                class is used to generate random gender values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.GenderValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.GenderValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.GenderValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.GenderValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.GuidValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.GuidValueGenerator" />
                class is used to generate <see cref="T:System.Guid" /> values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.GuidValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.GuidValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.GuidValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.GuidValueGenerator.AllowNull">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.GuidValueGenerator.NullPercentageChance">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.IPAddressValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.IPAddressValueGenerator" />
                class is used to generate IP Address values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.IPAddressValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.ValueGenerators.IPAddressValueGenerator.IsMatch(ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="P:ModelBuilder.ValueGenerators.IPAddressValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.IValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.IValueGenerator" />
                interface defines the members for generating values.
            </summary>
            <remarks>
                Values generated by <see cref="T:ModelBuilder.ValueGenerators.IValueGenerator" /> are different to types created by <see cref="T:ModelBuilder.TypeCreators.ITypeCreator" /> in
                that they do not have their properties set after construction.
                Value types and immutable types (strings for example) should use <see cref="T:ModelBuilder.ValueGenerators.IValueGenerator" /> to create them
                rather than <see cref="T:ModelBuilder.TypeCreators.ITypeCreator" />.
            </remarks>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.IValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type)">
            <summary>
                Generates a new value of the specified type.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="type">The type of value to generate.</param>
            <returns>A new value of the type.</returns>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.IValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo)">
            <summary>
                Generates a new value of the specified type.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="propertyInfo">The property to generate the value for.</param>
            <returns>A new value of the type.</returns>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.IValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo)">
            <summary>
                Generates a new value of the specified type.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="parameterInfo">The parameter to generate the value for.</param>
            <returns>A new value of the type.</returns>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.IValueGenerator.IsMatch(ModelBuilder.IBuildChain,System.Type)">
            <summary>
                Returns whether the specified type matches this generator.
            </summary>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="type">The type to evaluate.</param>
            <returns><c>true</c> if the type matches this generator; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.IValueGenerator.IsMatch(ModelBuilder.IBuildChain,System.Reflection.PropertyInfo)">
            <summary>
                Returns whether the specified property matches this generator.
            </summary>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="propertyInfo">The property to generate the value for.</param>
            <returns><c>true</c> if the property matches this generator; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.IValueGenerator.IsMatch(ModelBuilder.IBuildChain,System.Reflection.ParameterInfo)">
            <summary>
                Returns whether the specified parameter matches this generator.
            </summary>
            <param name="buildChain">The chain of instances built up to this point.</param>
            <param name="parameterInfo">The parameter to generate the value for.</param>
            <returns><c>true</c> if the parameter matches this generator; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ModelBuilder.ValueGenerators.IValueGenerator.Priority">
            <summary>
                Gets the priority for this generator.
            </summary>
        </member>
        <member name="T:ModelBuilder.ValueGenerators.LastNameValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.LastNameValueGenerator" />
                class is used to generate random last name values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.LastNameValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.LastNameValueGenerator" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.LastNameValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.LastNameValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.MailinatorEmailValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.MailinatorEmailValueGenerator" />
                class is used to generate email addresses that always point to the mailinator.com domain.
            </summary>
        </member>
        <member name="P:ModelBuilder.ValueGenerators.MailinatorEmailValueGenerator.Domain">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.MiddleNameValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.MiddleNameValueGenerator" />
                class is used to generate random middle name values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.MiddleNameValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.MiddleNameValueGenerator" />.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.MiddleNameValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.MiddleNameValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.NumericValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.NumericValueGenerator" />
                class is used to generate random numeric values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.NumericValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.ValueGenerators.NumericValueGenerator.GetMaximum(System.Type,System.String,System.Object)">
            <summary>
                Returns the maximum value for the specified generation target.
            </summary>
            <param name="type">The type of value to generate.</param>
            <param name="referenceName">Identifies the possible parameter or property name the value is intended for.</param>
            <param name="context">The possible context object the value is being created for.</param>
            <returns>The maximum value allowed to be generated.</returns>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.NumericValueGenerator.GetMinimum(System.Type,System.String,System.Object)">
            <summary>
                If AllowNegative, returns the minimum value for the specified generation target.
                Otherwise returns 0.
            </summary>
            <param name="type">The type of value to generate.</param>
            <param name="referenceName">Identifies the possible parameter or property name the value is intended for.</param>
            <param name="context">The possible context object the value is being created for.</param>
            <returns>The minimum value allowed to be generated.</returns>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.NumericValueGenerator.IsMatch(ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="P:ModelBuilder.ValueGenerators.NumericValueGenerator.AllowNull">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.NumericValueGenerator.NullPercentageChance">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.NumericValueGenerator.AllowNegative">
            <summary>
                Gets or sets whether this type can return negative values or not.
            </summary>
        </member>
        <member name="T:ModelBuilder.ValueGenerators.PhoneValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.AgeValueGenerator" />
                class is used to generate phone numbers.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.PhoneValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.PhoneValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.PhoneValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.PhoneValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.PostCodeValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.PostCodeValueGenerator" />
                class is used to generate random post code values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.PostCodeValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.PostCodeValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.PostCodeValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.PostCodeValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.RegexTypeNameValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.RegexTypeNameValueGenerator" />
                class is used to generate a value for a target type and property/parameter name.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.RegexTypeNameValueGenerator.#ctor(System.Text.RegularExpressions.Regex,System.Type)">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.RegexTypeNameValueGenerator" /> class.
            </summary>
            <param name="nameExpression">The regular expression that matches the target name.</param>
            <param name="type">The type of value to generate.</param>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.RegexTypeNameValueGenerator.IsMatch(ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.RelativeValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.RelativeValueGenerator" />
                class is used to assist in generating a value that is related to another value for a given context.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.RelativeValueGenerator.#ctor(System.Text.RegularExpressions.Regex,System.Type[])">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.RelativeValueGenerator" /> class.
            </summary>
            <param name="targetNameExpression">The expression to match the target property or parameter.</param>
            <param name="types">The types the generator can match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetNameExpression" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="types" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.RelativeValueGenerator.GetValue``1(System.Text.RegularExpressions.Regex,System.Object)">
            <summary>
                Gets the property value using the specified expression and context.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
            <param name="expression">The expression used to identify the property.</param>
            <param name="context">The context to use for reference information.</param>
            <returns>The string value of the source property.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.RelativeValueGenerator.IsMale(ModelBuilder.IExecuteStrategy)">
            <summary>
                Gets whether the build context being created is/should represents a male gender.
            </summary>
            <param name="executeStrategy">The execute strategy.</param>
            <returns><c>true</c> if the object is/should represent a male, otherwise <c>false</c>.</returns>
            <remarks>The value returned will be random if there is no supported gender identifier found.</remarks>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.RelativeValueGenerator.IsMatch(ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.StateValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.StateValueGenerator" />
                class is used to generate state addressing values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.StateValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.StateValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.StateValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.StateValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.StringValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.StringValueGenerator" />
                class is used to generate random <see cref="T:System.String" /> values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.StringValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.StringValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.StringValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.SuburbValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.SuburbValueGenerator" />
                class is used to generate random suburb values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.SuburbValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.SuburbValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.SuburbValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.SuburbValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.TimeZoneInfoValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.TimeZoneInfoValueGenerator" />
                class is used to generate random <see cref="T:System.TimeZoneInfo" /> values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.TimeZoneInfoValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.TimeZoneInfoValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.TimeZoneInfoValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.TimeZoneValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.TimeZoneValueGenerator" />
                class is used to generate IANA time zone values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.TimeZoneValueGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.TimeZoneValueGenerator" /> class.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.TimeZoneValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.TimeZoneValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.UriValueGenerator">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.UriValueGenerator" />
                class is used to generate random uri values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.UriValueGenerator.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:ModelBuilder.ValueGenerators.UriValueGenerator.IsMatch(ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="P:ModelBuilder.ValueGenerators.UriValueGenerator.Priority">
            <inheritdoc />
        </member>
        <member name="T:ModelBuilder.ValueGenerators.ValueGeneratorBase">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.ValueGeneratorBase" />
                class provides the base implementation for generating values.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.ValueGeneratorBase.Generate(ModelBuilder.IExecuteStrategy,System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.ValueGeneratorBase.Generate(ModelBuilder.IExecuteStrategy,System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.ValueGeneratorBase.Generate(ModelBuilder.IExecuteStrategy,System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executeStrategy" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.ValueGeneratorBase.IsMatch(ModelBuilder.IBuildChain,System.Reflection.PropertyInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.ValueGeneratorBase.IsMatch(ModelBuilder.IBuildChain,System.Reflection.ParameterInfo)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.ValueGeneratorBase.IsMatch(ModelBuilder.IBuildChain,System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.ValueGeneratorBase.Generate(ModelBuilder.IExecuteStrategy,System.Type,System.String)">
            <summary>
                Generates a new value of the specified type.
            </summary>
            <param name="executeStrategy">The execution strategy.</param>
            <param name="type">The type of value to generate.</param>
            <param name="referenceName">The name of the item to generate.</param>
            <returns>A new value of the type.</returns>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.ValueGeneratorBase.IsMatch(ModelBuilder.IBuildChain,System.Type,System.String)">
            <summary>
                Returns whether the specified type and name matches this generator.
            </summary>
            <param name="buildChain">The build chain.</param>
            <param name="type">The type of value to generate.</param>
            <param name="referenceName">The name of the item to generate.</param>
            <returns><c>true</c> if the type matches this generator; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:ModelBuilder.ValueGenerators.ValueGeneratorBase.Priority">
            <inheritdoc />
        </member>
        <member name="P:ModelBuilder.ValueGenerators.ValueGeneratorBase.Generator">
            <summary>
                Gets the random generator for this instance.
            </summary>
        </member>
        <member name="T:ModelBuilder.ValueGenerators.ValueGeneratorMatcher">
            <summary>
                The <see cref="T:ModelBuilder.ValueGenerators.ValueGeneratorMatcher" />
                class is used to provide the common logic for evaluating whether a generator matches a target to generate for.
            </summary>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.ValueGeneratorMatcher.#ctor(System.Type[])">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.ValueGeneratorMatcher" /> class.
            </summary>
            <param name="types">The types the generator can match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="types" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.ValueGeneratorMatcher.#ctor(System.String,System.Type[])">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.ValueGeneratorMatcher" /> class.
            </summary>
            <param name="referenceName">Identifies the possible parameter or property name the generator can match.</param>
            <param name="types">The types the generator can match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="referenceName" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.ValueGeneratorMatcher.#ctor(System.Text.RegularExpressions.Regex,System.Type[])">
            <summary>
                Initializes a new instance of the <see cref="T:ModelBuilder.ValueGenerators.ValueGeneratorMatcher" /> class.
            </summary>
            <param name="expression">Identifies the possible parameter or property name regular expression the generator can match.</param>
            <param name="types">The types the generator can match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:ModelBuilder.ValueGenerators.ValueGeneratorMatcher.IsMatch(ModelBuilder.IBuildChain,System.Type,System.String)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buildChain" /> parameter is <c>null</c>.</exception>
        </member>
    </members>
</doc>
